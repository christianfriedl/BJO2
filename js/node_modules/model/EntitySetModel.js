/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * a PrimaryEntityModel is a model for an entity which possesses an id field named 'id'
 *
 * an EntityModel is a model for an entity, i.e. something that resides in the database
 * ... that is not necessarily an id-having Entity ( that is a PrimaryEntity)
 *
 * data will reside in the _data property, and Model will create accessors for it
 */

"use strict";

const _ = require('lodash');
const q = require('q');
const bjoo = require('BJOObject.js');
const sql_DB = require('sql/DB.js');
const sql_Table = require('sql/Table.js');
const sql_Field = require('sql/Field.js');
const sql_Query = require('sql/Query.js');
const sql_Filter = require('sql/Filter.js');
const sql_ConditionSet = require('sql/ConditionSet.js');
const Errors = require('Errors.js');

function EntitySetModel() {
    bjoo.BJOObject.call(this);
}

function create(/* sql_DB */ db, /* sql_Table */ table, /* function(db, table) */ entityModelConstructor) {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 3 ) { throw new Error('arguments.length should be 3, is ' + arguments.length); }
        if ( !(table instanceof sql_Table.Table) ) { throw new Error('table should be of type sql_Table.Table, is ' + table); }
    /* @DEVELOPMENT } */

    const model = new EntitySetModel();
    model.setDb(db);
    model.setTable(table);
    model.setEntityModelConstructor(entityModelConstructor);
    return model;
}

EntitySetModel.prototype = new bjoo.BJOObject();
EntitySetModel.prototype.constructor = EntitySetModel;

EntitySetModel.prototype.setDb = function(/* sql_DB */ db) {
    this._db = db;
};

EntitySetModel.prototype.setTable = function(/* sql_Table */ table) {
    this._table = table;
};

EntitySetModel.prototype.setEntityModelConstructor = function(/* function */ entityModelConstructor) {
    this._entityModelConstructor = entityModelConstructor;
};

EntitySetModel.prototype.loadEntityById = function(/* int */ id) {
    const dfd = q.defer();
    this.findEntityById(id).then( (em) => {
        if ( em === null ) {
            dfd.reject('entity not found by id ' + id);
        }

        dfd.resolve(em);
    });
    return dfd.promise;
};

EntitySetModel.prototype.findEntityById = function(/* int */ id) {
    if ( this._table.getField('id') === undefined ) {
        throw new Error('table needs to have an id field');
    }
    const dfd = q.defer();
    const cond = sql_Filter.create()
        .setField(this._table.getField('id'))
        .setOp(sql_Filter.Op.eq)
        .setCompareTo(id);
    const query = sql_Query.select(this._table.getFieldsAsList())
        .from(this._table)
        .setFields(this._table.getFieldsAsList())
        .where(cond);
    this._db.fetchRow(query).then( (row) => {
        if ( row === undefined ) {
            dfd.resolve(null);
        } else {
            const entity = this._entityModelConstructor(this._db, this._table);
            entity.setValuesFromRow(row);
            dfd.resolve(entity);
        }
    });
    return dfd.promise;
};

EntitySetModel.prototype.findAllEntities = function() {
    return this.findEntities(sql_ConditionSet.create([], null, null, null)); // TODO we should have an orderBy here
};

EntitySetModel.prototype.findEntities = function(/* sql_ConditionSet */ conditionSet) {
    const dfd = q.defer();
    const query = sql_Query.select()
        .from(this._table)
        .setFields(this._table.getFieldsAsList())
        .setFilters(conditionSet.getFilters())
        .orderBy(conditionSet.getOrderBy()); // TODO set limit and offset...

    this._db.fetchAll(query).then( (rows) => {
        const entities = _.map(rows, (row) => {
            const entity = this._entityModelConstructor(this._db, this._table);
            entity.setValuesFromRow(row);
            return entity;
        });
        dfd.resolve(entities);
    });
    return dfd.promise;
};

exports.EntitySetModel = EntitySetModel;
exports.create = create;
