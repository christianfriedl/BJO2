/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * a PrimaryEntityModel is a model for an entity which possesses an id field named 'id'
 *
 * an EntityModel is a model for an entity, i.e. something that resides in the database
 * ... that is not necessarily an id-having Entity ( that is a PrimaryEntity)
 *
 * data will reside in the _data property, and Model will create accessors for it
 */

"use strict";

const _ = require('lodash');
const bjoo = require('BJOObject.js');
const sql_Table = require('sql/Table.js');
const sql_Field = require('sql/Field.js');
const sql_ValueField = require('sql/ValueField.js');
const sql_Query = require('sql/Query.js');
const Errors = require('Errors.js');

function EntityModel(/* sql_DB.DB */ db, /* sql_Table.Table */ table) {
    bjoo.BJOObject.call(this);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( !(table instanceof sql_Table.Table) ) { throw new Error('table should be of type sql_Table.Table', table); }
        /* @DEVELOPMENT } */

    }
    this._db = db;
    this._table = table.cloneWithValueFields();
    if ( this._table.getField('id') === undefined ) {
        this._table.addField(sql_ValueField.create('id', sql_Field.DataType.int, null, 'ID'));
    }
}

function create(/* sql_DB.DB */ db, /* sql_Table */ table) {
    let model = new EntityModel(db, table);
    return model;
}

EntityModel.prototype = new bjoo.BJOObject();
EntityModel.prototype.constructor = EntityModel;

exports.EntityModel = EntityModel;
exports.create = create;

EntityModel.prototype.save = function() {
    return this._insert();
};

EntityModel.prototype._insert = function() {
    return this._db.allSql('SELECT MAX(id)+1 AS id FROM ' + this._table.getName()).then( (rows) => { // TODO this should be done via a query obj
        console.log('rows from allsql', rows);
        this.setId(rows[0]['id']);
        const query = sql_Query.insert()
            .into(this._table)
            .setFields(this.getFieldsAsList());
        return this._db.run(query);
    }).catch( ( err ) => {
        console.log('error in _insert', err);
        throw new Error(err);
    });
};

EntityModel.prototype._update = function() {
    throw new Error('not implemented');
};

EntityModel.prototype.getId = function() {
    return this._table.getField('id').getValue();
};
EntityModel.prototype.setId = function(id) {
    this._table.getField('id').setValue(id);
    return this;
};

EntityModel.prototype.getFieldsAsList = function() {
    return this._table.getFieldsAsList();
};

EntityModel.prototype.getTable = function() {
    return this._table;
};

