/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";
/**
 * this file defines a primary dao, that is, a dao that has an id field
 */

var m_dao_dao = require('dao/dao.js');
var m_sql_condition = require('sql/condition.js');
var table = require('sql/table.js');
var m_sql_field = require('sql/field.js');
var m_sql_db = require('sql/db.js');
var m_sql_table = require('sql/table.js');
var query = require('sql/query.js');

function PrimaryDao(p_db) {
    this._className = 'dao.PrimaryDao';
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */ 
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_db; if ( !(PARAM instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); } 
        /* @DEVELOMPENT } */
        m_dao_dao.DAO.call(this, p_db);

    } else {
        m_dao_dao.DAO.call(this);
    }
}

PrimaryDao.prototype = new m_dao_dao.DAO();
PrimaryDao.prototype.constructor = PrimaryDao;

/**
 * @override
 */
PrimaryDao.prototype.table = function(p_table) {
    /* @DEVELOPMENT { */ var PARAM = p_table; if ( !(PARAM instanceof m_sql_table.Table || typeof(PARAM) === 'undefined') ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); } /* @DEVELOMPENT } */
    if ( typeof(p_table) !== 'undefined' ) {
        this._amendTable(p_table);
        return m_dao_dao.DAO.prototype.table.call(this, p_table);
    }
    return this._table;
};

PrimaryDao.prototype._amendTable = function(/* m_sql_table.Table */ p_table) {
    /* @DEVELOPMENT { */ var PARAM = p_table; if ( !(PARAM instanceof m_sql_table.Table) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }  /* @DEVELOMPENT } */
    if ( typeof(p_table.field('id')) === 'undefined' ) {
        var idField = m_sql_field.field('id', m_sql_field.DataType.int);
        idField.isEditable(false);
        p_table.field(idField);
    }
};


PrimaryDao.prototype.loadById = function(id, callback, calculateCalcFields) {
    if ( typeof(calculateCalcFields) === 'undefined' ) {
        calculateCalcFields = true;
    }
    this.field('id').value(id);
    var q = this._createIdSelect();
    this._db.fetchRow(q, function(err, row) { 
        if ( err ) {
            return callback(err);
        }
        this._setValuesFromRow(row);
        this.populateLookupFields(function(err, dao) {
            if ( calculateCalcFields ) {
                this.calculateCalcFields([m_sql_condition.condition(this.field('id'), m_sql_condition.Op.eq, id)], function(err, dao) {
                    callback(false, this);
                }.bind(this));
            } else {
                callback(false, this);
            }
        }.bind(this));
    }.bind(this));
};

PrimaryDao.prototype.update = function(callback) {
    var q = query.update()
        .table(this._table)
        .fields(this.writableFieldsAsList())
        .where(this._createIdWhere());
    this._db.run(q, function(err) {
        if ( err ) {
            return callback(err);
        }
        console.log('_save','update calling callback', callback, this);
        callback(false, this);
    }.bind(this));
};

PrimaryDao.prototype.insert = function(callback) {
    this._db.allSql('SELECT MAX(id)+1 AS id FROM ' + this._table.name(), [], function(err, rows) { // @TODO
        var id = rows[0]['id'];
        this.fieldValue('id', id);
        var q = query.insert()
            .into(this._table)
            .fields(this.writableFieldsAsList()); 
        this._db.run(q, function(err) {
            if ( err ) {
                return callback(err);
            }
            callback(false, this);
        }.bind(this));
    }.bind(this));
};

PrimaryDao.prototype.save = function(callback) {
    var q = null;
    if ( typeof(this.fieldValue('id')) !== 'undefined' && this.fieldValue('id') !== null ) {
        return this.update(callback);
    } else {
        return this.insert(callback);
    }
};

PrimaryDao.prototype._createIdSelect = function() {
    return query.select()
        .fields(this.writableFieldsAsList()) // TODO not writable but...
        .from(this._table)
        .where(this._createIdWhere());
};

PrimaryDao.prototype._createIdWhere = function() {
    return m_sql_condition.condition(this._fields['id'], m_sql_condition.Op.eq, this._fields['id'].value());
};

function primaryDao(p_db) { 
    if ( arguments.length > 0) { 
        /* @DEVELOPMENT { */ var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); }  /* @DEVELOMPENT } */
        return new PrimaryDao(p_db); 
    } else 
    { 
        return new PrimaryDao(); 
    } 
}

exports.PrimaryDao = PrimaryDao;
exports.primaryDao = primaryDao;
