"use strict";
/**
 * this file defines a primary dao, that is, a dao that has an id field
 */

var m_dao = require('dao/dao.js');
var m_sql_condition = require('sql/condition.js');
var table = require('sql/table.js');
var field = require('sql/field.js');
var query = require('sql/query.js');

function PrimaryDao(p_db, p_table) {
    if ( arguments.length > 0 ) {
        m_dao.DAO.call(this, p_db, p_table, primaryDao);
        this._className = 'dao.PrimaryDao';

        this._amendTable();
        this._fieldsFromTable(this._table);
    }
}

PrimaryDao.prototype = new m_dao.DAO();
PrimaryDao.prototype.constructor = PrimaryDao;

PrimaryDao.prototype.table = function(table) {
    if ( typeof(table) !== 'undefined' ) {
        this._table = table;
        this._amendTable();
        this._fieldsFromTable(table);
        return this;
    }
    return this._table;
};

PrimaryDao.prototype._amendTable = function() {
    if ( typeof(this._table.field('id')) === 'undefined' ) {
        this._table.field(field.field('id', field.DataType.int))
    }
};


PrimaryDao.prototype.loadById = function(id, callback, calculateCalcFields) {
    if ( typeof(calculateCalcFields) === 'undefined' ) {
        calculateCalcFields = true;
    }
    this.field('id').value(id);
    var q = this._createIdSelect();
    this._db.fetchRow(q, function(err, row) { 
        if ( err ) {
            return callback(err);
        }
        if ( calculateCalcFields ) {
            this.calculateCalcFields(m_sql_condition.condition(this.field('id'), m_sql_condition.Op.eq, id), function(err, row) {
                this._setValuesFromRow(row);
                callback(false, this);
            });
        } else {
            this._setValuesFromRow(row);
            callback(false, this);
        }
    }.bind(this));
};

PrimaryDao.prototype.update = function(callback) {
    var q = query.update()
        .table(this._table)
        .fields(this.writableFieldsAsList())
        .where(this._createIdWhere());
    this._db.run(q, function(err) {
        if ( err ) {
            throw err;
        }
        callback(false);
    });
};

PrimaryDao.prototype.insert = function(callback) {
    this._db.allSql('SELECT MAX(id)+1 AS id FROM ' + this._table.name(), [], function(err, rows) { // @TODO
        var id = rows[0]['id'];
        this.fieldValue('id', id);
        var q = query.insert()
            .into(this._table)
            .fields(this.writableFieldsAsList()); 
        this._db.run(q, function(err) {
            if ( err ) {
                throw err;
            }
            callback(false);
        });
    }.bind(this));
};

PrimaryDao.prototype.save = function(callback) {
    var q = null;
    if ( typeof(this.fieldValue('id')) !== 'undefined' && this.fieldValue('id') !== null ) {
        return this.update(callback);
    } else {
        return this.insert(callback);
    }
};

PrimaryDao.prototype._createIdSelect = function() {
    return query.select()
        .fields(this.fieldsAsList())
        .from(this._table)
        .where(this._createIdWhere());
};

PrimaryDao.prototype._createIdWhere = function() {
    return m_sql_condition.condition(this._fields['id'], m_sql_condition.Op.eq, this._fields['id'].value());
};

function primaryDao(p_db, p_table) { return new PrimaryDao(p_db, p_table); }

exports.PrimaryDao = PrimaryDao;
exports.primaryDao = primaryDao;
