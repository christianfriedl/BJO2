/**
 * this file defines a primary dao, that is, a dao that has an id field
 */

var dao = require('dao/dao.js');
var query = require('sql/query.js');
var condition = require('sql/condition.js');

function PrimaryDao(db, table) {
    dao.DAO.apply(this, arguments);
}

PrimaryDao.prototype = new dao.DAO();

function primaryDao(db, table) { return new PrimaryDao(db, table); }

PrimaryDao.prototype.id = function(id) {
    if ( typeof(id) !== 'undefined' ) {
        this.field('id').value(id);
        return this;
    }
    return this.field('id').value();
};

PrimaryDao.prototype.loadById = function(id, callback) {
    this.field('id').value(id);
    var query = this._createIdSelect();
    this._db.fetchRow(query, [], function(err, row) { 
        if ( err ) {
            return callback(err);
        }
        callback(false, row);
    });
};

PrimaryDao.prototype._createIdSelect = function() {
    return query.select()
        .fields(this._fieldsAsList())
        .from(this._table)
        .where(
            condition.condition(this._fields['id'], condition.Op.eq, this._fields['id'].value()));
};

exports.PrimaryDao = PrimaryDao;
exports.primaryDao = primaryDao;
