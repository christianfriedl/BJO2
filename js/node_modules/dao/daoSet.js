/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 * NOTE: if you use an "abstract dao", you need to explicitly set the table to the daoSet!
 * because otherwise, we cannot create a query for conditions, because we need the fields for that
 *
 */

"use strict";

var _ = require('underscore');
var async = require('async');
var m_bjoo = require('BJOObject.js');
var m_dao_daoDataProvider = require('dao/daoDataProvider.js');
var m_dao_primaryDao = require('dao/primaryDao.js');
var m_dao_dao = require('dao/dao.js');
var m_sql_query = require('sql/query.js');
var m_sql_aggregate = require('sql/aggregate.js');
var table = require('sql/table.js');
var query = require('sql/query.js');
var field = require('sql/field.js');
var m_sql_filter = require('sql/filter.js');
var m_sql_table = require('sql/table.js');
var m_sql_db = require('sql/db.js');

function DaoSet(/* m_sql_db.DB */ db, /*Function*/ constructor) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT */ 
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            if ( !(db instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on db: ' + db); }
            if ( !(constructor instanceof Function) ) { throw new Error('typecheck failed on constructor: ' + constructor); }
        /* @DEVELOMPENT } */
        m_dao_daoDataProvider.DaoDataProvider.call(this);
        this._db = db;
        this._table = undefined;
        this._constructor = constructor;
        var templateDao = this.templateDao();
        this.table(templateDao.table());
        this._className = 'dao.DaoSet';
    } else {
        m_dao_daoDataProvider.DaoDataProvider.call(this);
    }
};

function daoSet(/* m_sql_db.DB */ db, /*Function*/ constructor) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT */ 
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            if ( !(db instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on db: ' + db); }
            if ( !(constructor instanceof Function) ) { throw new Error('typecheck failed on constructor: ' + constructor); }
        /* @DEVELOMPENT } */
        return new DaoSet(db, constructor);
    } else {
        return new DaoSet();
    }
};

DaoSet.prototype = new m_dao_daoDataProvider.DaoDataProvider();
DaoSet.prototype.constructor = DaoSet;


/**
 * returns a pure, uninitialized dao
 */
/*dao.DAO*/ DaoSet.prototype.templateDao = function() {
    return this._constructor.call({}, this._db);
};

/**
 * if we have a table, we want to set it to the dao
 *
 * NOTE: this is only useful for "abstract" daos; for "application" daos that are usually primary daos, it would actually be destructive because
 * it might destroy the id field, probably
 */

DaoSet.prototype.tableToDao = function(/* m_dao_dao.DAO */ dao) {
    /* @DEVELOPMENT { */ var PARAM = this._table; if ( !(PARAM instanceof m_sql_table.Table || PARAM === undefined) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }  /* @DEVELOMPENT } */
    /* @DEVELOPMENT { */ var PARAM = dao; if ( !(PARAM instanceof m_dao_dao.DAO) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }  /* @DEVELOMPENT } */

    if ( this._table !== undefined ) {
        dao.table(this._table);
    }
};

/* low level function, will not perform calculateCalcFields()! */
DaoSet.prototype.loadOneByQuery = function(query, callback) {
    this._db.fetchRow(query, function(err, row) {
        if ( err ) return callback(err);
        var dao = this._constructor.call({}, this._db);
        this.tableToDao(dao);
        dao._setValuesFromRow(row);
        callback(false, dao);
    }.bind(this));
};

/* low level function, will not perform calculateCalcFields()! */
DaoSet.prototype.loadAllByQuery = function(query, callback) {
    this._db.fetchAll(query, function(err, rows) {
        /* @DEVELOPMENT { */ if ( err ) throw new Error(err); /* @DEVELOMPENT } */ if ( err ) return callback(err);
        var daos = [];
        _(rows).each(function(row) {
            var dao = this._constructor.call({}, this._db);
            this.tableToDao(dao);
            dao._setValuesFromRow(row);
            daos.push(dao);
        }.bind(this));
        callback(false, daos);
    }.bind(this));
};

/**
 * note: this assumes that the dao is a primary dao for calculating calc fields!
 */
DaoSet.prototype.loadAllByConditions = function(/* m_sql_conditionSet.ConditionSet */ conditions, callback, calculateDetailCalcFields, calculateAggregatedCalcFields) {
    var self = this;
    /*
     * if we were created for an "abstract dao", whose table was explicitly set from the outside, then 
     * we cannot fetch the table from the template dao because its constructor has no knowledge of said table
     * so in this case, the user has to set our table instead
     */
    if ( this._table === undefined ) {
        var templateDao = this.templateDao();
        this.table(templateDao.table());
    } 
    var fields = this.databaseFieldsAsList();
    var q = m_sql_query.select()
                .fields(fields)
                .from(this._table);
    q.conditions(conditions);

    function loadDetailRows(err, aggregateDao) {
        if ( err ) { throw new Error('loadDetailRows failed'); }

        calculateDetailCalcFields &= ( self._constructor.call({}) instanceof m_dao_primaryDao.PrimaryDao ); // determine whether an object instantiated by us would be primary or not

        return self.loadAllByQuery(q, function(err, daos) {
            if (err) { console.error('error in loadAllByQuery-loadDetailRows', err); return callback(err); }
            if ( calculateDetailCalcFields ) {
                async.each(daos, 
                    function(dao, callback2) {
                        var singleBoConditions = conditions.clone();
                        singleBoConditions.filters().push(m_sql_filter.filter(dao.field('id'), m_sql_filter.Op.eq, dao.field('id').value()));
                        async.parallel([
                            function(callback) { dao.calculateCalcFields(singleBoConditions.filters(), callback); },
                            /* ####### 
                            function(callback) {  // TODO phewww, this and the above might be dependent on each other under certain circumstances...?
                                dao.populateLookupFields(function(err, dao) {
                                    callback(err, dao); 
                                });
                            }
                            */
                        ], function(err) { 
                            callback2(err, daos, aggregateDao); 
                        });
                    }, function(err) {
                        callback(false, daos, aggregateDao);
                    });
            } else {
                async.each(daos, 
                    function(dao, callback2) {
                        dao.populateLookupFields(callback2);
                    }, function(err) {
                        callback(false, daos, aggregateDao);
                    }
                );
            }
        });
    }

    var aggregateDao = self.templateDao();
    if ( calculateAggregatedCalcFields ) {
        aggregateDao.calculateCalcFields(conditions, loadDetailRows);
    } else {
        loadDetailRows(false, undefined);
    }
};

DaoSet.prototype.calculateCalcFields = function(conditions, callback) {
    _(this.calcFieldsAsList()).each(function(f) { f.value(null); });
    async.each(this.calcFieldsAsList(), 
        function(f, callback2) {
            f.conditions(conditions);
            var q = f.query();
            this._db.fetchRow(q, function(err, row) {
                if ( err ) return callback(err);
                f.value(row[f.name()]);
                callback2(false, this);
            }.bind(this));
        }.bind(this),
        function(err) {
            callback(err, this);
        }.bind(this)
    );
};

DaoSet.prototype.countByConditions = function(conditions, callback) {
    var q = m_sql_query.select()
        .fields([m_sql_aggregate.aggregate(m_sql_aggregate.Type.count)])
        .from(this._table)
        .filters(conditions.filters());
    this._db.fetchRow(q, function(err, row) {
        if ( err ) return callback(err);
        callback(false, row.aggregate);
    });

};

exports.DaoSet = DaoSet;
exports.daoSet = daoSet;
