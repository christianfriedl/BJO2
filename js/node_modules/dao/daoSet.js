var _ = require('underscore');
var async = require('async');
var m_dao_daoDataProvider = require('dao/daoDataProvider.js');
var m_dao_primaryDao = require('dao/primaryDao.js');
var m_dao_dao = require('dao/dao.js');
var m_sql_query = require('sql/query.js');
var m_sql_aggregate = require('sql/aggregate.js');
var table = require('sql/table.js');
var query = require('sql/query.js');
var field = require('sql/field.js');
var m_sql_condition = require('sql/condition.js');

function DaoSet(/*sql_db*/p_db, /*sql_table*/p_table, /*function*/p_constructor) {
    if ( arguments.length > 0 ) {
        /* #ifdef DEVELOPMENT */ if ( arguments.length !== 3 || p_constructor === undefined ) { throw new Error('Illegal arguments length'); }
        m_dao_daoDataProvider.DaoDataProvider.call(this, p_db, p_table);
        this._className = 'dao.DaoSet';
        this._constructor = p_constructor;
    }
};

DaoSet.prototype = new m_dao_daoDataProvider.DaoDataProvider();
DaoSet.prototype.constructor = DaoSet;

/* low level function, will not perform calculateCalcFields()! */
DaoSet.prototype.loadOneByQuery = function(query, callback) {
    this._db.fetchRow(query, function(err, row) {
        if ( err ) return callback(err);
        var dao = this._constructor.call({}, this._db, this._table);
        dao._setValuesFromRow(row);
        callback(false, dao);
    }.bind(this));
};

/* low level function, will not perform calculateCalcFields()! */
DaoSet.prototype.loadAllByQuery = function(query, callback) {
    var self = this;
    console.log('### query', query);
    this._db.fetchAll(query, function(err, rows) {
        if ( err ) return callback(err);
        var daos = [];
        _(rows).each(function(row) {
            var dao = self._constructor.call({}, self._db, self._table); // construct a new dao of the correct kind
            dao._setValuesFromRow(row);
            daos.push(dao);
        }, this);
        callback(false, daos);
    }.bind(this));
};

DaoSet.prototype.loadAllByConditions = function(conditions, callback, calculateDetailCalcFields, calculateAggregatedCalcFields) {
    var self = this;
    var q = m_sql_query.select()
                .fields(this.databaseFieldsAsList())
                .from(this._table);
    if ( conditions.length > 0 ) {
        q.conditions(conditions);
    }
    console.log('###x loadAllByConditions q',q, conditions);

    function loadDetailRows(err, aggregateDao) {
        if ( err ) { throw new Error('loadDetailRows failed'); }

        calculateDetailCalcFields &= ( self._constructor.call({}) instanceof m_dao_primaryDao.PrimaryDao );

    console.log('###x loadDetailRows q',q);
        return self.loadAllByQuery(q, function(err, daos) {
            if (err) { console.error('error in loadAllByQuery-loadDetailRows', err); return callback2(err); }
            if ( calculateDetailCalcFields ) {
                async.each(daos, 
                    function(dao, callback2) {
                        var singleBoConditions = conditions.slice();
                        singleBoConditions.push(m_sql_condition.condition(dao.field('id'), m_sql_condition.Op.eq, dao.field('id').value()));
                        dao.calculateCalcFields(singleBoConditions, callback2);
                    }, function(err) {
                        callback(false, daos, aggregateDao);
                    });
            } else {
                callback(false, daos, aggregateDao);
            }
        });
    }

    var aggregateDao = self._constructor.call({}, self._db, self._table); // construct a new dao of the correct kind
    if ( calculateAggregatedCalcFields ) {
        aggregateDao.calculateCalcFields(conditions, loadDetailRows);
    } else {
        loadDetailRows(false, undefined);
    }
};

DaoSet.prototype.calculateCalcFields = function(conditions, callback) {
    _(this.calcFieldsAsList()).each(function(f) { f.value(null); });
    async.each(this.calcFieldsAsList(), 
        function(f, callback2) {
            f.conditions(conditions);
            var q = f.query();
            this._db.fetchRow(q, function(err, row) {
                if ( err ) return callback(err);
                f.value(row[f.name()]);
                callback2(false, this);
            }.bind(this));
        }.bind(this),
        function(err) {
            callback(err, this);
        }.bind(this)
    );
};

DaoSet.prototype.countByConditions = function(conditions, callback) {
    var q = m_sql_query.select()
        .fields([m_sql_aggregate.aggregate(m_sql_aggregate.Type.count)])
        .from(this._table);
    if ( conditions.length > 0 ) {
        q.conditions(conditions);
    }
    this._db.fetchRow(q, function(err, row) {
        if ( err ) return callback(err);
        callback(false, row.aggregate);
    });

};
function daoSet(/*sql_db*/p_db, /*sql_table*/p_table, /*function*/p_constructor) { return new DaoSet(p_db, p_table, p_constructor); }

exports.DaoSet = DaoSet;
exports.daoSet = daoSet;

