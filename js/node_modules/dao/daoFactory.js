/**
 * a dao factory holds a db object, and will be able to construct daos via
 * - a constructor function
 * - a name
 */

"use strict";

var m_sql_db = require('sql/db.js');
var m_bjoo = require('BJOObject.js');
var m_util = require('util.js');
var m_dao_dao = require('dao/dao.js');
var m_dao_primaryDao = require('dao/primaryDao.js');
var m_app_invoice_invoiceDao = require('app/invoice/invoiceDao.js');
var m_app_customer_customerDao = require('app/customer/customerDao.js');

function DaoFactory(/* m_sql_db.DB */ p_db) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 1'); }
            if ( !(p_db instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on p_db: ' + p_db); }
        /* @DEVELOMPENT } */

        this._db = p_db;

        this._constructors = {
            'dao.DAO': m_dao_dao.dao,
            'dao.PrimaryDao': m_dao_primaryDao.primaryDao,
            'app.InvoiceDao': m_app_invoice_invoiceDao.invoiceDao,
            'app.CustomerDao': m_app_customer_customerDao.customerDao
        };
    }
}

DaoFactory.prototype = new m_bjoo.BJOObject();
DaoFactory.prototype.constructor = DaoFactory;

DaoFactory.prototype.constructorForName = function(/* String */ p_name) {
    /* @DEVELOPMENT { */ if ( !(m_util.isString(p_name)) ) { throw new Error('typecheck failed on name: ' + p_name); }  /* @DEVELOMPENT } */
    /* @DEVELOPMENT { */ if ( typeof(this._constructors[p_name]) === 'undefined' ) { throw new Error('no constructor found for ' + p_name); } /* @DEVELOMPENT } */

    return this._constructors[p_name];
};
DaoFactory.prototype.forName = function(/* String */ p_name) {
    /* @DEVELOPMENT { */ if ( !(m_util.isString(p_name)) ) { throw new Error('typecheck failed on name: ' + p_name); }  /* @DEVELOMPENT } */
    return this.constructorForName(p_name).call(this._db);
};

DaoFactory.prototype.byConstructor = function(/* Function */ p_constructor) {
    /* @DEVELOPMENT { */ if ( typeof(p_constructor) !== 'function' ) { throw new Error('typecheck failed on p_constructor: ' + p_constructor); }  /* @DEVELOMPENT } */

    return p_constructor.call({}, this._db);
};

function daoFactory(/* m_sql_db.DB */ p_db) { if ( arguments.length > 0) { return new DaoFactory(p_db); } else { return new DaoFactory(); } }

exports.DaoFactory = DaoFactory;
exports.daoFactory = daoFactory;
