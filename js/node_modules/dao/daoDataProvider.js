/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

var async = require('async');
var _ = require('underscore');
var m_sql_table = require('sql/table.js');
var query = require('sql/query.js');
var m_sql_field = require('sql/field.js');
var m_sql_lookupField = require('sql/lookupField.js');
var m_sql_boField = require('sql/boField.js');
var m_sql_db = require('sql/db.js');
var m_sql_calcField = require('sql/calcField.js');

/*
 * abstract provider for dao data - base class for DaoSet and DAo
 */

var m_bjoo = require('BJOObject.js');

function DaoDataProvider() {
    m_bjoo.BJOObject.call(this);
    /* @DEVELOPMENT { */ if ( arguments.length > 0 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 0'); }  /* @DEVELOMPENT } */ 
    this._fields = {};
};

DaoDataProvider.prototype = new m_bjoo.BJOObject();
DaoDataProvider.prototype.constructor = DaoDataProvider;


DaoDataProvider.prototype.table = function(table) {
    if ( typeof(table) !== 'undefined' ) {
        /* @DEVELOPMENT { */ if ( !(table instanceof m_sql_table.Table) ) { throw new Error('typecheck failed on table: ' + table); }  /* @DEVELOMPENT } */
        this._table = table;
        this._fieldsFromTable(table);
        return this;
    }
    return this._table;
};

DaoDataProvider.prototype.field = function(fieldOrName) {
    if ( fieldOrName instanceof m_sql_field.Field ) { // TODO we really need to genericize this!!!!!!!!
        fieldOrName.table(this.table());
        this._fields[fieldOrName.name()] = fieldOrName;
        return this;
    }
    return this._fields[fieldOrName];
};

DaoDataProvider.prototype.addFields = function(fields) {
    var self = this;
    _.each(fields, function(f) { self.field(f); });
};

DaoDataProvider.prototype._fieldsFromTable = function(table) {
    var tf = table.fields();
    _.each(_.keys(tf), function(key) { 
        this.field(tf[key].clone()); 
    }, this);
};


/*
 * all fields
 */
DaoDataProvider.prototype.fieldsAsList = function() {
    return _.values(this._fields);
};

/*
 * fields that reside in the db, i.e., no calcFields nor boFields
 */
DaoDataProvider.prototype.databaseFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return f.isDatabaseField(); }); 
};

DaoDataProvider.prototype.calcFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f instanceof m_sql_calcField.CalcField); }); 
};

DaoDataProvider.prototype.lookupFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f instanceof m_sql_lookupField.LookupField); }); 
};

DaoDataProvider.prototype.boFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f instanceof m_sql_boField.BoField); }); 
};

function daoDataProvider(db, table) { if ( arguments.length > 0 ) { return new DaoDataProvider(db, table); } else { return new DaoDataProvider(); } }

exports.DaoDataProvider = DaoDataProvider;
exports.daoDataProvider = daoDataProvider;
