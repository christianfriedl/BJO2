var async = require('async');
var _ = require('underscore');
var table = require('sql/table.js');
var query = require('sql/query.js');
var field = require('sql/field.js');
var m_sql_lookupField = require('sql/lookupField.js');

/*
 * abstract provider for dao data - base class for DaoSet and DAo
 */

var m_bjoo = require('BJOObject.js');

function DaoDataProvider(/*sql_db*/p_db, /*sql_table*/p_table) {
    m_bjoo.BJOObject.call(this);
    this._className = 'dao.DaoDataProvider';
    if ( arguments.length > 0 ) {
        /* #ifdef DEVELOPMENT */ if ( arguments.length !== 2 ) { throw 'IllegalArgumentsLength'; }
        this._db = p_db;
        this._table = p_table;
        this._fields = {};
        this.table(p_table);
    }
};

DaoDataProvider.prototype = new m_bjoo.BJOObject();
DaoDataProvider.prototype.constructor = DaoDataProvider;


DaoDataProvider.prototype.table = function(table) {
    if ( typeof(table) !== 'undefined' ) {
        this._table = table;
        this._fieldsFromTable(table);
        return this;
    }
    return this._table;
};

DaoDataProvider.prototype.field = function(fieldOrName) {
    if ( typeof(fieldOrName.className) !== 'undefined' && (fieldOrName.className() === 'sql.LookupField' || fieldOrName.className() === 'sql.Field' || fieldOrName.className() === 'sql.CalcField') ) { // TODO we really need to genericize this!!!!!!!!
        fieldOrName.table(this.table());
        this._fields[fieldOrName.name()] = fieldOrName;
        return this;
    }
    return this._fields[fieldOrName];
};

DaoDataProvider.prototype.addFields = function(fields) {
    var self = this;
    _.each(fields, function(f) { self.field(f); });
};

DaoDataProvider.prototype._fieldsFromTable = function(table) {
    var tf = table.fields();
    _.each(_.keys(tf), function(key) { 
        this.field(tf[key].clone()); 
    }, this);
};


DaoDataProvider.prototype.fieldsAsList = function() {
    return _.values(this._fields);
};

DaoDataProvider.prototype.writableFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return f.className() !== 'sql.CalcField'; }); // TODO this condition is not exactly right
};

DaoDataProvider.prototype.databaseFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return f.className() !== 'sql.CalcField'; }); // TODO this condition is not exactly right
};

DaoDataProvider.prototype.calcFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f.className() === 'sql.CalcField'); }); 
}

DaoDataProvider.prototype.lookupFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f.className() === 'sql.LookupField'); }); 
}


function daoDataProvider(p_db, p_table) { if ( arguments.length > 0 ) { return new DaoDataProvider(p_db, p_table); } else { return new DaoDataProvider(); } }

exports.DaoDataProvider = DaoDataProvider;
exports.daoDataProvider = daoDataProvider;
