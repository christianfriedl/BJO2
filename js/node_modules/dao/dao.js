/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var async = require('async');
var _ = require('underscore');
var table = require('sql/table.js');
var query = require('sql/query.js');
var field = require('sql/field.js');
var m_sql_table = require('sql/table.js');
var m_sql_db = require('sql/db.js');
var m_sql_condition = require('sql/condition.js');
var m_sql_calcField = require('sql/calcField.js');
var condition = require('sql/condition.js');
var m_sql_query = require('sql/query.js');
var m_sql_aggregate = require('sql/aggregate.js');
var m_dao_daoDataProvider = require('dao/daoDataProvider.js');
var m_bjoo = require('BJOObject.js');

var DAO = function(/*Db*/p_db) {
    m_dao_daoDataProvider.DaoDataProvider.call(this);
    this._className = 'dao.DAO';
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */ 
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
            if ( !(p_db instanceof m_sql_db.DB) ) { throw new Error('Typecheck failure: p_db should be of class m_sql_db.DB: ' + p_db); }
        /* @DEVELOMPENT } */
        this._db = p_db;
        this._fieldLinks = [];
    } 
};

DAO.prototype = new m_dao_daoDataProvider.DaoDataProvider();
DAO.prototype.constructor = DAO;

DAO.prototype.table = function(p_table) {
    /* @DEVELOPMENT { */ var PARAM = p_table; if ( !(PARAM instanceof m_sql_table.Table || typeof(PARAM) === 'undefined') ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }  /* @DEVELOMPENT } */
    if ( typeof(p_table) !== 'undefined' ) {
        m_dao_daoDataProvider.DaoDataProvider.prototype.table.call(this, p_table);
        this._addAccessors();
        return this;
    }
    return this._table;
}


DAO.prototype._addAccessors = function() {
    // TODO: name must be identifier-compatible!
    _.each(this._fields, function(f) { 
        this[f.accessorName()] = function(val) { 
            if ( arguments.length === 1 && typeof(val) !== 'undefined' ) {
                return this.fieldValue(f.name(), val); 
            } else if ( arguments.length === 0 ) {
                return this.fieldValue(f.name()); 
            }
        }.bind(this); 
    }, this);
    return this;
};

DAO.prototype.db = function(db) {
    this._db = db;
    return this;
};

DAO.prototype.fieldValue = function(name, value) {
    if ( typeof(value) !== 'undefined' ) {
        this.field(name).value(value);
        return this;
    }
    return this._fields[name].value();
};

DAO.prototype._setValuesFromRow = function(row) {
    _.each(this._fields, function(f) { 
        if ( typeof(row[f.name()]) !== 'undefined' ) {
            f.value(row[f.name()]);
        }
    }, this);
    return this;
};

DAO.prototype.fieldValuesFromBo = function(bo) {
    _(this.writableFieldsAsList()).each( function(f) { 
        this.fieldValue(f.name(), bo.fieldValue(f.name()));
    }, this);
    return this;
};

/* low level function, will not perform calculateCalcFields()! */
DAO.prototype.loadByQuery = function(query, callback) {
    this._db.fetchRow(query, function(err, row) {
        if ( err ) return callback(err);
        this._setValuesFromRow(row);
        this.populateLookupFields(function(err, result) { 
            callback(err, this); 
        }.bind(this));
    }.bind(this));
};

DAO.prototype.calculateCalcFields = function(conditions, callback) {
    _(this.calcFieldsAsList()).each(function(f) { f.value(null); });
    async.each(this.calcFieldsAsList(), 
        function(f, callback2) {
            f.conditions(conditions);
            var q = f.query();
            this._db.fetchRow(q, function(err, row) {
                if ( err ) return callback(err);
                f.value(row[f.name()]);
                callback2(false, this);
            }.bind(this));
        }.bind(this),
        function(err) {
            callback(err, this);
        }.bind(this)
    );
};

DAO.prototype.populateLookupFields = function(callback) {
    async.each(this.lookupFieldsAsList(), function(f, callback2) {
        var q = f.query();
        this._db.fetchAll(q, function(err, rows) {
            _(rows).each(function(row) {
                f.addOption(row[f.labelFieldName()], row[f.valueFieldName()]);
            }.bind(this));
            callback2(false, this);
        }.bind(this));
    }.bind(this), function(err) {
        callback(err, this);
    }.bind(this));
};

DAO.prototype.countByConditions = function(conditions, callback) {
    var q = m_sql_query.select()
        .fields([m_sql_aggregate.aggregate(m_sql_aggregate.Type.count)])
        .from(this._table);
    if ( conditions.length > 0 ) {
        q.where(conditions);
    }
    this._db.fetchRow(q, function(err, row) {
        if ( err ) return callback(err);
        callback(false, row.aggregate);
    });

};

function dao(db) { if ( arguments.length > 0 ) { return new DAO(db); } else { return new DAO(); } }

exports.DAO = DAO;
exports.dao = dao;
