"use strict";

var async = require('async');
var table = require('sql/table.js');
var query = require('sql/query.js');
var field = require('sql/field.js');
var m_sql_calcField = require('sql/calcField.js');
var condition = require('sql/condition.js');
var m_sql_query = require('sql/query.js');
var _ = require('underscore');
var m_bjoo = require('BJOObject.js');

var DAO = function(p_db, p_table, p_constructor) {
    m_bjoo.BJOObject.apply(this);
    if ( arguments.length > 0 ) {
        this._className = 'dao.DAO';
        this._db = p_db;
        this._constructor = ( typeof(p_constructor) !== 'undefined') ? p_constructor : dao; // constructor for new daos in loadAllByQuery
        this._fields = {};
        this._fieldLinks = [];
        if ( typeof(p_table) === 'undefined' ) {
            throw new Error("can't construct dao without a table");
        }
        this.table(p_table);
        this._addAccessors();
    }
};

DAO.prototype = new m_bjoo.BJOObject();
DAO.prototype.constructor = DAO;

DAO.prototype._addAccessors = function() {
    // TODO: name must be identifier-compatible!
    _.each(this._fields, function(f) { 
        this[f.accessorName()] = function(val) { 
            if ( arguments.length === 1 && typeof(val) !== 'undefined' ) {
                return this.fieldValue(f.name(), val); 
            } else if ( arguments.length === 0 ) {
                return this.fieldValue(f.name()); 
            }
        }.bind(this); 
    }, this);
    return this;
};

DAO.prototype.db = function(db) {
    this._db = db;
    return this;
};

DAO.prototype.table = function(table) {
    if ( typeof(table) !== 'undefined' ) {
        this._table = table;
        this._fieldsFromTable(table);
        return this;
    }
    return this._table;
};

DAO.prototype.field = function(fieldOrName) {
    if ( typeof(fieldOrName.className) !== 'undefined' && (fieldOrName.className() === 'sql.Field' || fieldOrName.className() === 'sql.CalcField') ) { // TODO we really need to genericize this!!!!!!!!
        fieldOrName.table(this.table());
        this._fields[fieldOrName.name()] = fieldOrName;
        return this;
    }
    return this._fields[fieldOrName];
};

DAO.prototype.addFields = function(fields) {
    var self = this;
    _.each(fields, function(f) { self.field(f); });
};

DAO.prototype.fieldLinks = function(p_fieldLinks) {
    if ( typeof(p_fieldLinks) !== 'undefined' ) {
        this._fieldLinks = p_fieldLinks;
        return this;
    }
    return this._fieldLinks;
};

DAO.prototype.fieldValue = function(name, value) {
    if ( typeof(value) !== 'undefined' ) {
        this.field(name).value(value);
        return this;
    }
    return this._fields[name].value();
};

DAO.prototype.fieldsAsList = function() {
    return _.values(this._fields);
};

DAO.prototype.writableFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return !(f.className() === 'sql.CalcField'); }); // TODO this condition is not exactly right
}

DAO.prototype.calcFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f.className() === 'sql.CalcField'); }); 
}

DAO.prototype._fieldsFromTable = function(table) {
    var tf = table.fields();
    _.each(_.keys(tf), function(key) { 
        this.field(tf[key].clone()); 
    }, this);
};

DAO.prototype._setValuesFromRow = function(row) {
    _.each(this._fields, function(f) { 
        if ( typeof(row[f.name()]) !== 'undefined' ) {
            f.value(row[f.name()]);
        }
    }, this);
    return this;
};

DAO.prototype.fieldValuesFromBo = function(bo) {
    _(this.writableFieldsAsList()).each( function(f) { 
        this.fieldValue(f.name(), bo.fieldValue(f.name()));
    }, this);
    return this;
};

/* low level function, will not perform calculateCalcFields()! */
DAO.prototype.loadOneByQuery = function(query, callback) {
    this._db.fetchRow(query, function(err, row) {
        if ( err ) return callback(err);
        this._setValuesFromRow(row);
        callback(false, this);
    }.bind(this));
};

/* low level function, will not perform calculateCalcFields()! */
DAO.prototype.loadAllByQuery = function(query, callback) {
    var self = this;
    this._db.fetchAll(query, function(err, rows) {
        if ( err ) return callback(err);
        var daos = [];
        _(rows).each(function(row) {
            var dao = self._constructor.call({}, self._db, self._table); // construct a new dao of the correct kind
            dao._setValuesFromRow(row);
            daos.push(dao);
        }, this);
        callback(false, daos);
    }.bind(this));
};

DAO.prototype.loadAllByConditions = function(conditions, callback, calculateCalcFields) {
    var q = m_sql_query.select()
                .fields(this.fieldsAsList())
                .from(this._table);
    if ( conditions.length > 0 ) {
        q.where(conditions);
    }
    return this.loadAllByQuery(q, function(err, daos) {
        if ( calculateCalcFields ) {
            async.each(daos, 
                function(callback2) {
                    dao.calculateCalcFields(conditions, callback2);
                }, function(err) {
                    callback(false, daos);
                });
        } else {
            callback(false, daos);
        }
    });
};

DAO.prototype.calculateCalcFields = function(conditions, callback) {
    async.map(this.calcFieldsAsList(), 
        function(f, callback) {
            f.conditions(conditions);
            var q = f.query();
            this._db.fetchRow(q, function(err, row) {
                if ( err ) return callback(err);
                f.value(row[f.name()]);
                callback(false, this);
            }.bind(this));
        }.bind(this),
        function(err, row) {
            callback(err, this);
        }
    );
};

function dao(db, table) { return new DAO(db, table); }

exports.DAO = DAO;
exports.dao = dao;
