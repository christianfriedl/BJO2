/*
 * Copyright (C) 2015-2017 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * a PrimaryEntityModel is a model for an entity which possesses an id field named 'id'
 *
 * an EntityModel is a model for an entity, i.e. something that resides in the database
 * ... that is not necessarily an id-having Entity ( that is a PrimaryEntity)
 *
 * data will reside in the _data property, and Model will create accessors for it
 */

"use strict";

const _ = require('lodash');
const q = require('q');
const bjoo = require('BJOObject.js');
const sql_DB = require('sql/DB.js');
const sql_Table = require('sql/Table.js');
const sql_Field = require('sql/Field.js');
const sql_ValueField = require('sql/ValueField.js');
const sql_Query = require('sql/Query.js');
const sql_Filter = require('sql/Filter.js');
const sql_ConditionSet = require('sql/ConditionSet.js');
const model_EntitySetModel = require('model/EntitySetModel.js');
const app_customer_CustomerEntityModel = require('app/customer/CustomerEntityModel.js');

function CustomerEntitySetModel() {
    model_EntitySetModel.EntitySetModel.call(this);
}

function create(/* sql_DB */ db) {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 1 ) { throw new Error('arguments.length should be 1, is ' + arguments.length); }
        if ( !(db instanceof sql_DB.DB) ) { throw new Error('db should be of type sql_DB.DB, is ' + db); }
    /* @DEVELOPMENT } */

    const model = new CustomerEntitySetModel();
    model.setDb(db);
    const table = sql_Table.create('customer'); // TODO move this to app...CustomerTable.js
    table.addField(sql_ValueField.create('id', sql_Field.DataType.int));
    table.addField(sql_ValueField.create('name', sql_Field.DataType.string));
    model.setTable(table);
    model.setEntityModelConstructor(app_customer_CustomerEntityModel.create);

    return model;
}

CustomerEntitySetModel.prototype = new model_EntitySetModel.EntitySetModel();
CustomerEntitySetModel.prototype.constructor = CustomerEntitySetModel;

exports.CustomerEntitySetModel = CustomerEntitySetModel;
exports.create = create;
