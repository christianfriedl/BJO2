
const q = require('q');
const BJOO = require('BJOOBject.js');
const DelegationUtil = require('DelegationUtil.js');
const app_CustomerEntity = require('app/customer/CustomerEntity.js');
const sql_Table = require('sql/Table.js');
const sql_Field = require('sql/Field.js');
const sql_ValueField = require('sql/ValueField.js');
const model_EntityModel = require('model/EntityModel.js');
const model_EntitySetModel = require('model/EntitySetModel.js');
const entity_Entity = require('entity/Entity.js');
const entity_EntitySet = require('entity/EntitySet.js');

function CustomerEntitySet() {
    entity_EntitySet.EntitySet.apply(this);
}

function create(db) {
    const table = sql_Table.create('customer');
    table.addField(sql_ValueField.create('id', sql_Field.DataType.int));
    table.addField(sql_ValueField.create('name', sql_Field.DataType.string));
    const entitySetModel = model_EntitySetModel.create(db, table, model_EntityModel.create);
    const entitySet = entity_EntitySet.create(entitySetModel, app_CustomerEntity.create);

    const ces = new CustomerEntitySet();
    ces.setModel(entitySetModel);
    ces.setEntityConstructor(app_CustomerEntity.createFromModel);

    return ces;
}

exports.CustomerEntitySet = CustomerEntitySet;
exports.create = create;

CustomerEntitySet.prototype = new entity_EntitySet.EntitySet();
CustomerEntitySet.prototype.constructor = CustomerEntitySet;

CustomerEntitySet.prototype.setEntitySet = function(entitySet) {
    this._entitySet = entitySet;
};

CustomerEntitySet.prototype.setEntityConstructor = function(constructor) {
    this._entityConstructor = constructor;
};

CustomerEntitySet.prototype.loadEntityById = function(/* int */ id) { 
    return this._entitySet.loadEntityById(id).then( ( em ) => {
        console.log('loadEntityById', em, 'this*************', this, '*************func*************', this._entityConstructor);
        return q(this._entityConstructor(em));
    }); 
};

CustomerEntitySet.prototype.findEntityById = function(/* int */ id) { 
    return this._entitySet.findEntityById(id).then( ( em ) => {
        if ( em ) {
            return q(this._entityConstructor(em));
        } else {
            return q(null);
        }
    }); 
};

CustomerEntitySet.prototype.findAllEntities = function() { 
    return this._entitySet.findAllEntities().then( ( ems ) => {
        return _.map(ems, ( em ) => {
            return this._entityConstructor(em);
        });
    });
};

CustomerEntitySet.prototype.findEntities = function(/* sql_ConditionSet */ conditionSet) { 
    return this._entitySet.findEntities(conditionSet).then( ( ems ) => {
        return _.map(ems, ( em ) => {
            return this._entityConstructor(em);
        });
    });
};
