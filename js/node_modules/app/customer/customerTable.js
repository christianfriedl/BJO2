/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var m_sql_table = require('sql/table.js');
var m_sql_field = require('sql/field.js');
var m_sql_fieldLink = require('sql/fieldLink.js');
var m_sql_calcField = require('sql/calcField.js');
var m_sql_lazyFieldLink = require('sql/lazyFieldLink.js');
var m_sql_lazyCalcFieldLink = require('sql/lazyCalcFieldLink.js');
var m_app_invoice_invoiceTable = require('app/invoice/invoiceTable.js');

function CustomerTable() {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 0 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 0'); }
    /* @DEVELOMPENT } */
    m_sql_table.Table.call(this, 'customer');

    this.field(m_sql_field.field('id', m_sql_field.DataType.int));
    this.field(m_sql_field.field('firstName', m_sql_field.DataType.string).isRequired(true));
    this.field(m_sql_field.field('lastName', m_sql_field.DataType.string).isRequired(true));
    this.field(m_sql_calcField.calcField('sumInvoiceAmount', m_sql_field.DataType.int, 'Sum Invoice Amount', m_sql_calcField.CalcType.sum));

    this.field('id').isEditable(false);
}

CustomerTable.prototype = new m_sql_table.Table();
CustomerTable.prototype.constructor = CustomerTable;

/**
 * dependencies: this.id, invoiceTable.customerId, invoiceTable.amount
 */
CustomerTable.prototype.prepareLinks = function(llMgr, table) {
    if ( table instanceof m_app_invoice_invoiceTable.InvoiceTable ) {
        var invLink = m_sql_lazyFieldLink.lazyFieldLink(this, 'id', this, 'id', table, 'customerId', m_sql_fieldLink.Type.oneToMany);
        llMgr.addLink(invLink);
        var sumInvoiceAmountLink = m_sql_lazyCalcFieldLink.lazyCalcFieldLink(this, 'sumInvoiceAmount', 'id', table, 'amount');
        llMgr.addLink(sumInvoiceAmountLink);
        llMgr.apply();
    }
};

function customerTable() { return new CustomerTable(); }

exports.CustomerTable = CustomerTable;
exports.customerTable = customerTable;
