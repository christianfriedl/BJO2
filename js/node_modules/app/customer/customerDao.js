/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  a concrete dao for the customer table
 *  that knows how to set its own table properly
 */

"use strict";

var m_dao_primaryDao = require('dao/primaryDao.js');
var m_app_customer_customerTable = require('app/customer/customerTable.js');
var m_app_invoice_invoiceTable = require('app/invoice/invoiceTable.js');
var m_sql_lazyFieldLinkManager = require('sql/lazyFieldLinkManager.js');
var m_sql_db = require('sql/db.js');

function CustomerDao(db) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 1'); }
            if ( !(db instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on db'); }  
        /* @DEVELOMPENT } */

        var llmgr = m_sql_lazyFieldLinkManager.lazyFieldLinkManager();
        var table = m_app_customer_customerTable.customerTable();
        var invTable = m_app_invoice_invoiceTable.invoiceTable();
        table.prepareLinks(llmgr, invTable);
        invTable.prepareLinks(llmgr, table);
        llmgr.apply();

        m_dao_primaryDao.PrimaryDao.call(this, db);
        this.table(table);
    } else {
        m_dao_primaryDao.PrimaryDao.call(this);
    }
}

CustomerDao.prototype = new m_dao_primaryDao.PrimaryDao();
CustomerDao.constructor = CustomerDao;

function customerDao(db) { if ( arguments.length > 0 ) { return new CustomerDao(db); } else { return new CustomerDao(); } }

exports.customerDao = customerDao;
exports.CustomerDao = CustomerDao;
