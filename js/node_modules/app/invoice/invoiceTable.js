/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var util = require('util');
var m_sql_table = require('sql/table.js');
var m_sql_field = require('sql/field.js');
var m_sql_fieldLink = require('sql/fieldLink.js');
var m_sql_calcField = require('sql/calcField.js');
var m_sql_lookupField = require('sql/lookupField.js');
var m_sql_lazyFieldLink = require('sql/lazyFieldLink.js');
var m_sql_lazyFieldLinkManager = require('sql/lazyFieldLinkManager.js');
var m_sql_lazyLookupFieldLink = require('sql/lazyLookupFieldLink.js');
var m_app_customer_customerTable = require('app/customer/customerTable.js');

function InvoiceTable() {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 0 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 0'); }
    /* @DEVELOMPENT } */
    m_sql_table.Table.call(this, 'invoice');

    this.field(m_sql_field.field('id', m_sql_field.DataType.int));
    this.field(m_sql_field.field('amount', m_sql_field.DataType.int));
    this.field(m_sql_lookupField.lookupField('customerId', null, 'customer id'));
}


InvoiceTable.prototype = new m_sql_table.Table();
InvoiceTable.prototype.constructor = InvoiceTable;

/**
 * dependencies: this.customerId, customerTable.id, customerTable.lastName
 */
InvoiceTable.prototype.prepareLinks = function(/* m_sql_lazyFieldLinkManager.LazyFieldLinkManager */ llMgr, /* m_sql_table.Table */ table) {
    /* @DEVELOPMENT { */
        if ( !(llMgr instanceof m_sql_lazyFieldLinkManager.LazyFieldLinkManager) ) { throw new Error('Typecheck failure: llMgr should be of class m_sql_lazyFieldLinkManager.LazyFieldLinkManager: ' + util.inspect(llMgr)); }
        if ( !(table instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: table should be of class m_sql_table.Table: ' + util.inspect(table)); }
    /* @DEVELOMPENT } */
    if ( table instanceof m_app_customer_customerTable.CustomerTable ) {
        // var fieldLink = m_sql_lazyFieldLink.LazyFieldLink(this, 'customerId', this, 'customerId', table, 'id', m_sql_fieldLink.Type.manyToOne); // @TODO, we need to have BOTH links, ultimately... (?)
        // llMgr.addLink(fieldLink); // @TODO
        var lookupLink = m_sql_lazyLookupFieldLink.lazyLookupFieldLink(this, 'customerId', table, 'id', 'lastName');
        llMgr.addLink(lookupLink);
    }
};

function invoiceTable() { return new InvoiceTable(); }

exports.InvoiceTable = InvoiceTable;
exports.invoiceTable = invoiceTable;
