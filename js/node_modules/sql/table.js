/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var bjoo = require('BJOObject.js');
var _ = require('underscore');
var m_sql_field = require('sql/field.js');

function Table(name) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */ if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 1'); } /* @DEVELOMPENT } */ 
        this._name = name; 
        this._fields = {};
        this._indices = {};
    }
}

Table.prototype = new bjoo.BJOObject();
Table.prototype.constructor = Table;

Table.prototype.name = function(name) {
    if ( typeof(name) !== 'undefined' ) {
        this._name = name;
        return this;
    }
    return this._name;
};

Table.prototype.field = function(nameOrField) {
    if ( nameOrField instanceof m_sql_field.Field ) { 
        nameOrField.table(this);
        nameOrField.seq(_(this._fields).values().length);
        this._fields[nameOrField.name()] = nameOrField;
        return this;
    }
    return this._fields[nameOrField];
};

Table.prototype.fields = function(fields) {
    if ( typeof(fields) !== 'undefined' ) {
        _.each(fields, function(f) { this.field(f); }, this);
	return this;
    }
    return this._fields;
};

Table.prototype.fieldsAsList = function() {
    return _(this._fields).values();
};


Table.prototype.index = function(nameOrIndex) {
    if ( nameOrInstance instanceof m_sql_Field.Field ) {
        nameOrField.table(this);
        this._indices[nameOrField.name()] = nameOrIndex;
        return this;
    }
    return this._indices[nameOrField];
};

Table.prototype.indices = function(indices) {
    if ( typeof(indices) !== 'undefined' ) {
        _.each(indices, function(f) { this.index(f); }, this);
	return this;
    }
    return this._indices;
};

Table.prototype.fieldLinks = function(fieldLinks) {
    if ( typeof(fieldLinks) !== 'undefined' ) {
        this._fieldLinks = fieldLinks;
        return this;
    }
    return this._fieldLinks;
};
/*
 * { lookup: { module, controller, action, labelFieldName } }
 */
Table.prototype.frontendSettings = function(/* optional Object */ frontendSettings) {
    if ( typeof(frontendSettings) !== 'undefined' ) {
        this._frontendSettings = frontendSettings;
        return this;
    }
    return this._frontendSettings;
};


function table(name) { return new Table(name); }

exports.Table = Table;
exports.table = table;
