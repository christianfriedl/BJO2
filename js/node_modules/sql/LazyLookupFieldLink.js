/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * LazyFieldLinks are here to avoid a circular dependency issue.
 *
 * A LazyFieldLink is a prototype of a fieldLink, that will only create the actual link when its apply() is called
 * - so we can create fieldLinks before we actually have all the fields
 * - this is the lazy variant for creating a m_sql_fieldLink.fieldLink
 *
 * The variant for LookupField just sets up the relevant fields in the LookupField.
 */

"use strict";

var _ = require('underscore');
var util = require('util');
var m_util = require('util.js');
var m_sql_table = require('sql/table.js');
var m_sql_field = require('sql/field.js');
var m_sql_baseLazyFieldLink = require('sql/baseLazyFieldLink.js');
var m_sql_lookupField = require('sql/lookupField.js');

/**
 * NOTE: it is assumed that label field and target field both belong to targetTable
 */
function LazyLookupFieldLink(/* m_sql_table.Table */ table, /* string */ fieldName, /* m_sql_table.Table */ targetTable, /* string */ targetFieldName, /* string */ labelFieldName) {
    m_sql_baseLazyFieldLink.BaseLazyFieldLink.call(this, table, fieldName);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 5 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 5); }
            if ( !(targetTable instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: targetTable should be of class m_sql_table.Table: ' + targetTable); }
            if ( !( m_util.isString(targetFieldName) ) ) { throw new Error('typecheck failed on targetFieldName: ' + targetFieldName + ', must be string'); }
            if ( !( m_util.isString(labelFieldName) ) ) { throw new Error('typecheck failed on labelFieldName: ' + labelFieldName + ', must be string'); }
        /* @DEVELOMPENT } */
        this._targetTable = targetTable;
        this._targetFieldName = targetFieldName;
        this._labelFieldName = labelFieldName;
    } 
}

function lazyLookupFieldLink(/* m_sql_table.Table */ table, /* string */ fieldName, /* m_sql_table.Table */ targetTable, /* string */ targetFieldName, /* string */ labelFieldName) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 5 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 5); }
            if ( !(targetTable instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: targetTable should be of class m_sql_table.Table: ' + targetTable); }
            if ( !( m_util.isString(targetFieldName) ) ) { throw new Error('typecheck failed on targetFieldName: ' + targetFieldName + ', must be string'); }
            if ( !( m_util.isString(labelFieldName) ) ) { throw new Error('typecheck failed on labelFieldName: ' + labelFieldName + ', must be string'); }
        /* @DEVELOMPENT } */
        return new LazyLookupFieldLink(table, fieldName, targetTable, targetFieldName, labelFieldName);
    }  else {
        return new LazyLookupFieldLink();
    }
}

LazyLookupFieldLink.prototype = new m_sql_baseLazyFieldLink.BaseLazyFieldLink();
LazyLookupFieldLink.prototype.constructor = LazyLookupFieldLink;

//======================================

/**
 * apply the link data to the lookupfield
 */
LazyLookupFieldLink.prototype.apply = function() {
    var field = this._table.field(this._fieldName);
    /* @DEVELOPMENT { */
        if ( !(field instanceof m_sql_lookupField.LookupField) ) { throw new Error('Typecheck failure: field should be of class m_sql_lookupField.LookupField: ' + field); }
    /* @DEVELOMPENT } */

    field.targetField(this._targetTable.field(this._targetFieldName));
    field.targetLabelField(this._targetTable.field(this._labelFieldName));
}

exports.LazyLookupFieldLink = LazyLookupFieldLink;
exports.lazyLookupFieldLink = lazyLookupFieldLink;
