/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @TODO we currently only manage sum fields
 */

"use strict";

var _ = require('underscore');
var m_util = require('util.js');
var m_sql_table = require('sql/table.js');
var m_sql_field = require('sql/field.js');
var m_sql_baseLazyFieldLink = require('sql/baseLazyFieldLink.js');

/**
 * NOTE: it is assumed that byField belongs to table
 */
function LazyCalcFieldLink(/* m_sql_table.Table */ table, /* string */ fieldName, /* string */ byFieldName, /* string */ sumTable, /* string */ sumFieldName) {
    m_sql_baseLazyFieldLink.BaseLazyFieldLink.call(this, table, fieldName);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 5 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 5); }
            if ( !(sumTable instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: sumTable should be of class m_sql_table.Table: ' + sumTable); }
            if ( !( m_util.isString(byFieldName) ) ) { throw new Error('typecheck failed on sumFieldName: ' + sumFieldName + ', must be string'); }
            if ( !( m_util.isString(sumFieldName) ) ) { throw new Error('typecheck failed on sumFieldName: ' + sumFieldName + ', must be string'); }
        /* @DEVELOMPENT } */

        this._byFieldName = byFieldName;
        this._sumTable = sumTable;
        this._sumFieldName = sumFieldName;
    }
}

function lazyCalcFieldLink(/* m_sql_table.Table */ table, /* string */ fieldName, /* string */ byFieldName, /* string */ sumTable, /* string */ sumFieldName) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 5 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 5); }
            if ( !(table instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: table should be of class m_sql_table.Table: ' + table); }
            if ( !(sumTable instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: sumTable should be of class m_sql_table.Table: ' + sumTable); }
            if ( !( m_util.isString(fieldName) ) ) { throw new Error('typecheck failed on fieldName: ' + fieldName + ', must be string'); }
            if ( !( m_util.isString(sumFieldName) ) ) { throw new Error('typecheck failed on sumFieldName: ' + sumFieldName + ', must be string'); }
        /* @DEVELOMPENT } */

        return new LazyCalcFieldLink(table, fieldName, byFieldName, sumTable, sumFieldName);
    } else {
        return new LazyCalcFieldLink();
    }
}

LazyCalcFieldLink.prototype = new m_sql_baseLazyFieldLink.BaseLazyFieldLink();
LazyCalcFieldLink.prototype.constructor = LazyCalcFieldLink;

//======================================

LazyCalcFieldLink.prototype.apply = function() {
    /* @DEVELOPMENT { */
        if ( typeof(this._table) === 'undefined' ) { throw new Error('_table undefined'); }
        if ( typeof(this._table.field(this._fieldName)) === 'undefined' ) { throw new Error('_table.field... undefined'); }
        if ( typeof(this._sumTable) === 'undefined' ) { throw new Error('_sumTable undefined'); }
        if ( typeof(this._sumTable.field(this._sumFieldName)) === 'undefined' ) { throw new Error('_sumTable.field(sumfieldname) undefined'); }
    /* @DEVELOMPENT } */
    var field = this._table.field(this._fieldName);
    field.byField(this._table.field(this._byFieldName));
    field.sumField(this._sumTable.field(this._sumFieldName));
}

exports.LazyCalcFieldLink = LazyCalcFieldLink;
exports.lazyCalcFieldLink = lazyCalcFieldLink;
