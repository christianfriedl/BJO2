/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var _ = require('underscore');
var util = require('util.js');

var m_sql_field = require('sql/field.js');
var m_sql_query = require('sql/query.js');
var m_sql_aggregate = require('sql/aggregate.js');
var m_sql_filter = require('sql/filter.js');

var CalcType = { sum: 'sum' };

/**
 * for CalcType.sum:
 * - byField = this.link.sourceField
 * - sumField = this.link.targetField
 * - (byField on the other end of the link) = this.link.sourceField.targetField
 *
 * e.g.:
 *      customer.sumInvoiceAmount:
 *          link.sourceField = customer.id
 *          link.targetField = invoice.amount
 *          customer.id.link[invoice].targetField = invoice.id
 */

/*
 * byField is the (id) field by which to set up the link to the other table for the sum etc
 * external dependencies: sumField, byField
 */
function CalcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /* string */ label, /* m_sql_calcField.CalcType */ calcType, /* OPTIONAL m_sql_field.Field */ byField, /* OPTIONAL m_sql_field.Field */ sumField) {
    if ( arguments.length > 0 ) {
        m_sql_field.Field.call(this, name, dataType, null, label);
        /* @DEVELOPMENT { */
            if ( !(arguments.length === 4 || arguments.length === 6) { throw new Error('Illegal argument length '  + arguments.length + ', should be 4 or 6'); }  
            if ( !(util.isString(name)) ) { throw new Error('typecheck failed on name'); }  
            if ( !(util.isString(dataType)) ) { throw new Error('typecheck failed on dataType'); }  
            if ( !(util.isString(label)) ) { throw new Error('typecheck failed on label'); }  
            if ( !(util.isString(calcType)) ) { throw new Error('typecheck failed on calcType'); }  
            if ( !( _(_(m_sql_calcField.CalcType).values()).contains(calcType) ) { throw new Error('typecheck failed on calcType: ' + calcType + ', not in ' + m_sql_calcField.CalcType); }
            if ( !( util.isInEnum(calcType, m_sql_calcField.CalcType) ) ) { throw new Error('typecheck failed on calcType: ' + calcType + ', not in ' + m_sql_calcField.CalcT); }
            if ( ! ( typeof(sumField) === 'undefined' || sumField instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: sumField should be of class m_sql_field.Field: ' + sumField); }
            if ( ! ( typeof(byField) === 'undefined' || byField instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: byField should be of class m_sql_field.Field: ' + byField); }
        /* @DEVELOMPENT } */
        this._isEditable = false; // TODO is not yet evaluated anywhere
        this._isDatabaseField = false;
        this._filters = [];
        this._calcType = calcType;
        /// @TODO: 
        //      link.sourceField = byField
        //      link.targetField = sumField!
        if ( arguments.length === 6 ) {
            this._link = m_sql_fieldLink.fieldLink(byField, targetField, m_sql_fieldLink.Type.oneToMany);
        }
    } else {
        m_sql_field.Field.call(this);
    }
}

function calcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /* string */ label, /* m_sql_calcField.CalcType */ calcType, /* OPTIONAL m_sql_field.Field */ sumField, /* OPTIONAL m_sql_field.Field */ byField) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( !(arguments.length === 4 || arguments.length === 6) { throw new Error('Illegal argument length '  + arguments.length + ', should be 4 or 6'); }  
            if ( !(util.isString(name)) ) { throw new Error('typecheck failed on name'); }  
            if ( !(util.isString(dataType)) ) { throw new Error('typecheck failed on dataType'); }  
            if ( !(util.isString(label)) ) { throw new Error('typecheck failed on label'); }  
            if ( !(util.isString(calcType)) ) { throw new Error('typecheck failed on calcType'); }  
            if ( !( util.isInEnum(calcType, m_sql_calcField.CalcType) ) ) { throw new Error('typecheck failed on calcType: ' + calcType + ', not in ' + m_sql_calcField.CalcT); }
            if ( ! ( typeof(sumField) === 'undefined' || sumField instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: sumField should be of class m_sql_field.Field: ' + sumField); }
            if ( ! ( typeof(byField) === 'undefined' || byField instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: byField should be of class m_sql_field.Field: ' + byField); }
        /* @DEVELOMPENT } */
        return new CalcField(name, dataType, label, calcType, byField);
    } else {
        return new CalcField();
    }
}



CalcField.prototype = new m_sql_field.Field();
CalcField.prototype.constructor = CalcField;

CalcField.prototype.clone = function() {
    var f = new CalcField(this._name, this._dataType, this._label, this._calcType, this._sumField, this._byField);
    f._isEditable = false;
    f._filters = this._filters;
    f._sumField = this._sumField;
    f._byField = this._byField;
    f._id = this._id;
    f.table(this._table);
    return f;
};

/*
 * NOTE: the filter "sourceField = targetField" is always set in the query
 * if additional filters are set on our this object, these will be added on top
 */
CalcField.prototype.query = function() {
    switch ( this._calcType ) {
        case CalcType.sum:
            if ( typeof(this._sumField) === 'undefined' ) {
                throw new Error('calcField of calcType "sum" requires sumField to be set');
            }
            var agg = m_sql_aggregate.aggregate(m_sql_aggregate.Type.sum, this.sumField());
            agg.alias(this._name);
            var link = this._link;
            var q = m_sql_query.select()
                .tables( [this._table, this.sumField().table()] )
                .fields([agg])
                .where(m_sql_filter.filter(link.sourceField(), m_sql_filter.Op.eq, link.sourceField().link(this.table()).targetField()));
            if ( this._filters.length > 0 ) {
                _(this._filters).each(function(filter) { 
                    console.log('CalcField: adding filter', filter);
                    q.where(filter); 
                });
            }
            console.log('CalcField: q=', q);
            return q;
            break;
        default: 
            throw new Error('no such calcType as ' + this._calcType);
    }
};

/*
 * the field by which to set up the join filter
 * getter
 */
CalcField.prototype.byField = function() {
    return this._link.sourceField();
};

CalcField.prototype.sumField = function() {
    return this._link.targetField();
};

CalcField.prototype.link = function(/* m_sql_fieldLink.FieldLink */ link) {
    if ( typeof(link) !== 'undefined' ) {
        /* @DEVELOPMENT { */
            if ( !(link instanceof m_sql_fieldLink.FieldLink) ) { throw new Error('Typecheck failure: link should be of class m_sql_fieldLink.Fie: ' + link); }
        /* @DEVELOMPENT } */

        this._link = link;
        return this;
    }
    return this._link;
};

CalcField.prototype.filters = function(filters) {
    if ( typeof(filters) !== 'undefined' ) {
        this._filters = filters;
        return this;
    }
    return this._filters;
};

exports.CalcField = CalcField;
exports.calcField = calcField;
exports.CalcType = CalcType;
