/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var sqlite3 = require('sqlite3').verbose();
// var sqlite3 = require('sqlite3');
var query = require('./query.js');

function DB() {
    this._db = null;
}

DB.prototype.open = function(fileName) {
    this._db = new sqlite3.Database(fileName);
    return this;
};

DB.prototype.close = function() {
    this._db.close();
    return this;
};

DB.prototype.runSql = function(sqlString, params, callback) {
    // console.log('sqlite_db.runSql', sqlString, params);
    this._db.run(sqlString, params, function(err) {
        callback(err);
    });
    return this;
};

DB.prototype.allSql = function(sqlString, params, callback) {
    // console.log('sqlite_db.allSql', sqlString, params);
    this._db.all(sqlString, params, callback);
    return this;
};

DB.prototype.run = function(sqlQuery, callback) {
    var q = query.query(sqlQuery);
    var qs = q.queryString();
    var p = q.params();
    // console.log('sqlite_db.run: queryString: ', qs, p);
    this.runSql(qs, p, function(err) {
        callback(err);
    });
    return this;
};


/**
 * string query, array params -> callback(err, row)
 */
DB.prototype.fetchRow = function(sqlQuery, callback) {
    var q = query.query(sqlQuery);
    var qs = q.queryString();
    var p = q.params();
    // console.log('sqlite_db_fetchRow: queryString is', qs, p);
    this._db.get(qs, p, function(err, row) {
        // console.log('sqlite_db_fetchRow: result row is', row);
        callback(err, row);
    });
    return this;
};

DB.prototype.fetchAll = function(sqlQuery, callback) {
    var q = query.query(sqlQuery);
    var qs = q.queryString();
    var p = q.params();
    //console.log('sqlite_db_fetchAll: queryString is', qs, p);
    this._db.all(qs, p, function(err, rows) {
        // console.log('sqlite_db_fetchAll: result rows is', rows);
        callback(err, rows);
    });
    return this;
};

function db(fileName) {
    return new DB(fileName);
}

exports.DB = DB;
exports.db = db;
