/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var m_bjoo = require('BJOObject.js');
var m_sql_query = require('sql/query.js');
var m_sql_ddl = require('sql/ddl.js');
var m_sql_field = require('sql/field.js');
var m_sql_conditionSet = require('sql/conditionSet.js');
var m_sql_filter = require('sql/filter.js');
var m_sql_aggregate = require('sql/aggregate.js');
var _ = require('underscore');

function Query(sqlQuery) {
    m_bjoo.BJOObject.call(this);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }  
            if ( !(sqlQuery instanceof m_sql_query.Query || sqlQuery instanceof m_sql_ddl.Query) ) { throw new Error('typecheck failed on sqlQuery'); }  
        /* @DEVELOMPENT } */
        this._sqlQuery = sqlQuery;
        this._params = [];
    }
}

Query.prototype = new m_bjoo.BJOObject();
Query.prototype.constructor = Query;

Query.prototype.queryString = function() {
    this._params = []; // !!!!! this is not very nice, the query string methods are not repeatable!
    switch ( this._sqlQuery.type() ) {
        case m_sql_query.Type.select:
            return this._selectQueryString();
            break;
        case m_sql_query.Type.insert:
            return this._insertQueryString();
            break;
        case m_sql_query.Type.update:
            return this._updateQueryString();
            break;
        case m_sql_query.Type.delete:
            return this._deleteQueryString();
            break;
        case m_sql_ddl.Type.create:
            return this._createQueryString();
            break;
        default:
            throw 'no such query type';
            break;
    }
};

Query.prototype._insertQueryString = function() {
    var table = this._sqlQuery.tables()[0];
    var fields = this._sqlQuery.fields();
    var sql = 'INSERT INTO ' + table.name() + ' (';
    sql += _(fields).invoke('name').join(', '); // we do not use table.fields, because those values get cloned in the dao and are to be taken straight from the fields() in the query
    sql += ') VALUES (';
    sql += _(fields).map(function(field) { this._params.push(field.value()); return '?'; }.bind(this)).join(', ');
    sql += ')';
    return sql;
};

Query.prototype._updateQueryString = function() {
    var table = this._sqlQuery.table();
    var sql = 'UPDATE ' + table.name() + ' SET ';
    sql += _(this._sqlQuery.fields()).map(function(field) { this._params.push(field.value()); return field.name() + ' = ?'; }.bind(this)).join(', ');

    if ( this._sqlQuery.filters().length > 0 ) {
        sql += ' ' + this._whereClause();
    }

    return sql;
};

/**
 * creates the query string for a delete query
 */
Query.prototype._deleteQueryString = function() {
    var table = this._sqlQuery.table();
    var sql = 'DELETE FROM ' + table.name();
    if ( this._sqlQuery.filters().length > 0 ) {
        sql += ' ' + this._whereClause();
    }

    return sql;
};

Query.prototype._selectQueryString = function() {
    var sql = 'SELECT ';
    var ff = this._sqlQuery.fields();
    var ffMap = _(ff).map(function(f) { 
        if ( f instanceof m_sql_aggregate.Aggregate ) {
            switch ( f.type() ) {
                case m_sql_aggregate.Type.sum:
                    sql += 'SUM(' + f.field().fQName() + ')';
                    break;
                case m_sql_aggregate.Type.count:
                    if ( f.field() ) {
                        sql += 'COUNT(' + f.field().fQName() + ')';
                    } else {
                        sql += 'COUNT(*)';
                    }
                    break;
                default:
                    throw 'no such aggregate: ' + ff.type();
            }
            var alias = 'aggregate';
            if ( f.alias() !== null ) {
                alias = f.alias();
            } else if ( typeof(f.field()) !== 'undefined' ) {
                alias = f.field().name();
            }
            sql += ' AS ' + alias;
        } else {
            return f.fQName(); 
        }
    });
    sql += ffMap.join(', ') + ' FROM ';
    sql += _(this._sqlQuery.tables()).invoke('name').join(', ');
    if ( this._sqlQuery.filters().length > 0 ) {
        sql += ' ';
        sql += this._whereClause(this._sqlQuery);
    }

    sql += ' ' + this._orderByClause();
    sql += ' ' + this._limitOffsetClause();
    sql = sql.trim();
    return sql;
};

Query.prototype._fieldRefOrValue = function(fieldOrValue) {
    if ( fieldOrValue instanceof m_sql_field.Field ) {
        return fieldOrValue.name();
    } else {
        return "'" + fieldOrValue + "'";
    }
};

Query.prototype._isField = function(fieldOrValue) {
    return ( fieldOrValue instanceof m_sql_field.Field );
};

Query.prototype._whereClause = function() {
    var sql = 'WHERE ';
    sql += _.map(
        this._sqlQuery.filters(), function(c) { 
            var fieldOrValue = c.compareTo();
            var what = null;
            if ( this._isField(fieldOrValue) ) {
                what = fieldOrValue.fQName();
            } else {
                what = '?';
                this._params.push(fieldOrValue);
            }
            return c.field().fQName() + ' ' + this._opString(c.op()) + ' ' + what;
        }.bind(this)).join(' AND ');
    return sql;
};

Query.prototype._limitOffsetClause = function() {
    var offset = this._sqlQuery.offset();
    if ( this._sqlQuery.limit() !== null )  {
        if ( offset === null ) {
            offset = 0;
        }
        return 'LIMIT ' + + this._sqlQuery.limit() + ' OFFSET ' + offset + ' ';
    } else if ( this._sqlQuery.offset() !== null ) {
        throw new Exception('offset without limit is illegal.');
    } else {
        return ' ';
    }
};

Query.prototype._opString = function(op) {
    switch ( op ) {
        case m_sql_filter.Op.eq:
            return '=';
        default:
            throw new Error('TODO implement _opString other than eq!!!');
    }
};

Query.prototype._orderByClause = function() {
    if ( this._sqlQuery.orderBy() !== null )  {
        return 'ORDER BY ' + _(this._sqlQuery.orderBy().fields()).reduce(function(memo, o) { return (memo === '' ? '' : ', ') + this._orderByStuff(o); }.bind(this), '') + ' ';
    } else {
        return ' ';
    }
};

/**
 * ahem, TODO, the name is awful
 */
Query.prototype._orderByStuff = function(orderBy) {
    return orderBy.field().name() + ' ' + orderBy.direction();
};

Query.prototype._createQueryString = function() {
    var table = this._sqlQuery.table();
    var sql = 'CREATE TABLE ' + table.name() + ' (';
    sql += _.map(table.fields(), function(f) { return this._createFieldString(f); }.bind(this)).join(', ');
    sql += ')';
    return sql;
};

Query.prototype._createFieldString = function(field) {
    var sql = field.name() + ' ' + this._createFieldTypeString(field);
    return sql;
};

Query.prototype._createFieldTypeString = function(f) {
    switch ( f.dataType() ) {
        case m_sql_field.DataType.int:
            return 'INT';
        case m_sql_field.DataType.string:
            return 'TEXT';
        default:
            throw 'no such field type: ' + f.type();
    }
};

Query.prototype.params = function() {
    if ( arguments.length > 0 ) {
        this._params = Array.prototype.slice.call(arguments);
        return this;
    }
    return this._params;
};

function query(sqlQuery) { return new Query(sqlQuery); }

exports.Query = Query;
exports.query = query;
