"use strict";

var bjoo = require('BJOObject.js');
var sq = require('sql/query.js');
var ddl = require('sql/ddl.js');
var field = require('sql/field.js');
var condition = require('sql/condition.js');
var aggregate = require('sql/aggregate.js');
var _ = require('underscore');

function Query(serverQuery) {
    this._serverQuery = serverQuery;
    this._params = [];
}

Query.prototype.queryString = function() {
    this._params = []; // !!!!! this is not very nice, the query string methods are not repeatable!
    switch ( this._serverQuery.type() ) {
        case sq.Type.select:
            return this._selectQueryString();
            break;
        case sq.Type.insert:
            return this._insertQueryString();
            break;
        case sq.Type.update:
            return this._updateQueryString();
            break;
        case ddl.Type.create:
            return this._createQueryString();
            break;
        default:
            throw 'no such query type';
            break;
    }
};

Query.prototype._insertQueryString = function() {
    var table = this._serverQuery.tables()[0];
    var fields = this._serverQuery.fields();
    var sql = 'INSERT INTO ' + table.name() + ' (';
    sql += _(fields).invoke('name').join(', '); // we do not use table.fields, because those values get cloned in the dao and are to be taken straight from the fields() in the query
    sql += ') VALUES (';
    sql += _(fields).map(function(field) { this._params.push(field.value()); return '?'; }.bind(this)).join(', ');
    sql += ')';
    return sql;
};

Query.prototype._updateQueryString = function() {
    var table = this._serverQuery.table();
    var sql = 'UPDATE ' + table.name() + ' SET ';
    sql += _(table.fields()).map(function(field) { this._params.push(field.value()); return field.name() + ' = ?'; }.bind(this)).join(', ');

    if ( this._serverQuery.conditions().length > 0 ) {
        sql += ' ' + this._whereClause();
    }

    return sql;
};

Query.prototype._deleteQueryString = function() {
    var table = this._serverQuery.table();
    var sql = 'DELETE FROM ' + table.name();
    if ( this._serverQuery.conditions().length > 0 ) {
        sql += ' ' + this._whereClause();
    }

    return sql;
};

Query.prototype._selectQueryString = function() {
    var sql = 'SELECT ';
    var ff = this._serverQuery.fields();
    var ffMap = _(ff).map(function(f) { 
        console.log('#### f', f);
        if ( f instanceof aggregate.Aggregate ) {
            switch ( f.type() ) {
                case aggregate.Type.sum:
                    sql += 'SUM(' + f.field().name() + ')';
                    break;
                case aggregate.Type.count:
                    sql += 'COUNT(' + f.field().name() + ')';
                    break;
                default:
                    throw 'no such aggregate: ' + ff.type();
            }
        } else {
            return f.name(); 
        }
    });
    sql += ffMap.join(', ') + ' FROM ';
    sql += _(this._serverQuery.tables()).invoke('name').join(', ');
    if ( this._serverQuery.conditions().length > 0 ) {
        sql += ' ';
        sql += this._whereClause(this._serverQuery);
    }
    return sql;
};

Query.prototype._fieldRefOrValue = function(fieldOrValue) {
    if ( typeof(fieldOrValue.className) !== 'undefined' && fieldOrValue.className() === 'sql.Field' ) {
        return fieldOrValue.name();
    } else {
        return "'" + fieldOrValue + "'";
    }
};

Query.prototype._isField = function(fieldOrValue) {
    return ( typeof(fieldOrValue._className) !== 'undefined' && fieldOrValue.className() === 'sql.Field' ); 
};

Query.prototype._whereClause = function() {
    var sql = 'WHERE ';
    sql += _.map(
        this._serverQuery.conditions(), function(c) { 
            var fieldOrValue = c.compareTo();
            var what = null;
            if ( this._isField(fieldOrValue) ) {
                what = fieldOrValue.name();
            } else {
                what = '?';
                this._params.push(fieldOrValue);
            }
            return c.field().name() + ' ' + this._opString(c.op()) + ' ' + what;
        }.bind(this)).join(' AND ');
    return sql;
};

Query.prototype._opString = function(op) {
    switch ( op ) {
        case condition.Op.eq:
            return '=';
        default:
            throw 'TODO implement _opString!!!';
    }
};

Query.prototype._createQueryString = function() {
    var table = this._serverQuery.table();
    var sql = 'CREATE TABLE ' + table.name() + ' (';
    sql += _.map(table.fields(), function(f) { return this._createFieldString(f); }.bind(this)).join(', ');
    sql += ')';
    return sql;
};

Query.prototype._createFieldString = function(field) {
    var sql = field.name() + ' ' + this._createFieldTypeString(field);
    return sql;
};

Query.prototype._createFieldTypeString = function(f) {
    switch ( f.dataType() ) {
        case field.DataType.int:
            return 'INT';
        case field.DataType.string:
            return 'TEXT';
        default:
            throw 'no such field type: ' + f.type();
    }
};

Query.prototype.params = function() {
    if ( arguments.length > 0 ) {
        this._params = Array.prototype.slice.call(arguments);
        return this;
    }
    return this._params;
};

function query(serverQuery) { return new Query(serverQuery); }

exports.Query = Query;
exports.query = query;
