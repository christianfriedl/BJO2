"use strict";

var m_sql_field = require('sql/field.js');

var Type = { oneToMany: 'oneToMany', oneToOne: 'oneToOne', manyToMany: 'manyToMany', manyToOne: 'manyToOne' };

function FieldLink(sourceField, targetField, type) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT */ if ( arguments.length !== 3 ) { throw new Error('illegal argument length ' + arguments.length); }
        /* @DEVELOPMENT */ if ( !(sourceField instanceof m_sql_field.Field) ) { throw new Error('typecheck failed'); }
        /* @DEVELOPMENT */ if ( !(targetField instanceof m_sql_field.Field) ) { throw new Error('typecheck failed'); }
        this._sourceField = sourceField;
        this._targetField = targetField;
        if ( typeof(type) === 'undefined' ) {
            type = Type.oneToMany;
        }
        this._type = type;
    }
    this._className = 'sql.FieldLink';
}

FieldLink.prototype.sourceField = function(field) {
    if ( typeof(field) !== 'undefined' ) {
        this._sourceField = field;
        return this;
    }
    return this._sourceField;
};

FieldLink.prototype.targetField = function(field) {
    if ( typeof(field) !== 'undefined' ) {
        this._targetField = field;
        return this;
    }
    return this._targetField;
};

FieldLink.prototype.type = function(type) {
    if ( typeof(type) !== 'undefined' ) {
        this._type = type;
        return this;
    }
    return this._type;
};

FieldLink.prototype.webize = function() {
    return { targetField: { name: this._targetField.name(), label: this._targetField.label() }, type: this._type };
};

function fieldLink(sourceField, targetField, type) { return new FieldLink(sourceField, targetField, type); }

exports.FieldLink = FieldLink;
exports.fieldLink = fieldLink;
exports.Type = Type;
