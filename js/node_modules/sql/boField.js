/*
 * a boField will describe a field whose object is, itself, a business object.
 * it will be linked to a lookupField (or any other field that has itself a fieldLink)
 * and will retrieve its value by loading (or, later on, caching) the bo
 */
"use strict";

var _ = require('underscore');
var m_util = require('util.js');
var m_bjoo = require('BJOObject.js');
var m_sql_field = require('sql/field.js');
var m_sql_db = require('sql/db.js');

var DataType = { int: 'int', string: 'string' }

function ValidationException(field, message) {
   this._field = field;
   this._message = message;
   this._className = "sql.ValidationException";
}

ValidationException.prototype = new m_bjoo.BJOObject();
ValidationException.prototype.constructor = ValidationException;

function BoField(/*String*/ name, /* Object */ value, /*[String]*/ label, /* m_sql_db.DB */ db, /* Function */ constructor, /* m_sql_field.Field */ idField) {
    this._className = 'sql.BoField';
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 5 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 5); }
            var PARAM = name; if ( !(m_util.isString(PARAM)) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }
            var PARAM = label; if ( !(m_util.isString(PARAM)) ) { throw new Error('typecheck failed on label: ' + PARAM); }
            if ( !(db instanceof m_sql_db.DB) ) { throw new Error('Typecheck failure: db should be of class m_sql_db.DB: ' + db); }
            if ( !(constructor instanceof Function) ) { throw new Error('Typecheck failure: constructor should be of class Function: ' + constructor); }
            if ( !(idField instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: idField should be of class m_sql_field.Field: ' + idField); }
        /* @DEVELOMPENT } */
        m_sql_field.Field.call(this, name, m_sql_field.DataType.bo, value, label);

        this._db = db; // TODO blargh fields should never have to know about the db...
        this._constructor = constructor;
        this._idField = idField;
    }
}

function boField(/*String*/ name, /* ? */ value, /*[String]*/ label, /* m_sql_db.DB */ db, /* Function */ constructor, /* m_sql_field.Field */ idField) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 5 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 5); }
            var PARAM = name; if ( !(m_util.isString(PARAM)) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }
            var PARAM = label; if ( !(m_util.isString(PARAM)) ) { throw new Error('typecheck failed on label: ' + PARAM); }
            var PARAM = constructor; if ( !(PARAM instanceof Function) ) { throw new Error('typecheck failed on constructor: ' + PARAM); }
            if ( !(db instanceof m_sql_db.DB) ) { throw new Error('Typecheck failure: db should be of class m_sql_db.DB: ' + db); }
            if ( !(idField instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: idField should be of class m_sql_field.Field: ' + idField); }
        /* @DEVELOMPENT } */

        return new BoField(name, value, label, db, constructor, idField);
    } else {
        return new BoField();
    }
}

BoField.prototype = new m_sql_field.Field();
BoField.prototype.constructor = BoField;


/*
 * private internal function
 * construct the bo from our idField's value
 */
BoField.prototype._boFromIdField = function() {
    this._bo = this._constructor.call({}, this._db);
};

/*
 * setting boField's value means that we receive a bo and store it, just
 * like Field's default behaviour - but as a side-effect, we store the id in our id field
 *
 * getting the value means creating the bo from the id field, 
 * and returning it -- optimization: cache it if the id has not changed(?)
 */
BoField.prototype.value = function(bo) {
    /* @DEVELOPMENT { */ 
    /* @DEVELOMPENT } */


    if ( typeof(val) !== 'undefined' ) {
        this._bo = bo;
        this._idField.value(bo.id());
        return this;
    }

    this._boFromIdField();
    return this._bo;
};

exports.BoField = BoField;
exports.boField = boField;
