var bjoo = require('BJOObject.js');

var DataType = { int: 'int', string: 'string' }

function Field(/*String*/name, /*m_sql_field.DataType*/dataType, /*[Object]*/value, /*[String]*/label) {
    this._className = 'sql.Field';
    this._name = name;
    this._dataType = dataType;
    if ( typeof(value) !== 'undefined' ) {
        this._value = value;
    } else {
        this._value = null;
    }
    if ( typeof(label) !== 'undefined' ) {
        this._label = label;
    } else {
        this._label = name;
    }
    this._links = {};
}

Field.prototype = new bjoo.BJOObject();
Field.prototype.constructor = Field;

Field.prototype.clone = function() {
    var f = new Field(this._name, this._dataType, this._value);
    f.table(this._table);
    console.log('cloned', this, f);
    return f;
};

Field.prototype.table = function(table) {
	if ( typeof(table) !== 'undefined' ) {	
	    this._table = table;
        return this;
    }
    return this._table;
};

Field.prototype.name = function(name) {
	if ( typeof(name) !== 'undefined' ) {	
	    this._name = name;
        return this;
    }
    return this._name;
};

Field.prototype.identifierName = function() {
    return this._name; // TODO!!!
};

Field.prototype.accessorName = function() {
    return this.identifierName();
};

Field.prototype.getterName = function() {
    var iName = this.identifierName();
    return 'get' + iName.substr(0, 1).toUpperCase() + iName.substr(1);
};

Field.prototype.setterName = function() {
    var iName = this.identifierName();
    return 'set' + iName.substr(0, 1).toUpperCase() + iName.substr(1);
};

Field.prototype.dataType = function(dataType) {
	if ( typeof(dataType) !== 'undefined' ) {	
	    this._dataType = dataType;
        return this;
    }
    return this._dataType;
};

Field.prototype.value = function(value) {
	if ( typeof(value) !== 'undefined' ) {	
	    this._value = value;
        return this;
    }
    return this._value;
};

Field.prototype.label = function(label) {
	if ( typeof(label) !== 'undefined' ) {	
	    this._label = label;
        return this;
    }
    return this._label;
};

/*
 * field links for this field
 */
Field.prototype.links = function() {
    return this._links;
};

Field.prototype.link = function(/*m_sql_field.Field*/field, /*m_sql_fieldLink.FieldLink*/link) {
    if ( typeof(link) !== 'undefined' ) {
        this._links[field.guid()] = link;
        return this;
    }
    return this._links[field.guid()];
};


// return non-circular object, so it can be jsonified and sent to the webz
// TODO name is a bit dodgy
// @pure
Field.prototype.webize = function() {
    return { name: this._name, dataType: this._dataType, value: this._value, label: this._label };
};


function field(name, dataType, value, label) { return new Field(name, dataType, value, label); }

exports.Field = Field;
exports.field = field;
exports.DataType = DataType;
