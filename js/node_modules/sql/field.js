var bjoo = require('BJOObject.js');

var Type = { int: 'int', string: 'string' }

function Field(name, type) {
    this._className = 'sql.Field';
    this._name = name;
    this._type = type;
    this._value = null;
}

Field.prototype = new bjoo.BJOObject();

Field.prototype.table = function(table) {
	if ( typeof(table) !== 'undefined' ) {	
	    this._table = table;
        return this;
    }
    return this._table;
};

Field.prototype.name = function(name) {
	if ( typeof(name) !== 'undefined' ) {	
	    this._name = name;
        return this;
    }
    return this._name;
};

Field.prototype.identifierName = function() {
    return this._name; // TODO!!!
};

Field.prototype.getterName = function() {
    var iName = this.identifierName();
    return 'get' + iName.substr(0, 1).toUpperCase() + iName.substr(1);
};

Field.prototype.setterName = function() {
    var iName = this.identifierName();
    return 'set' + iName.substr(0, 1).toUpperCase() + iName.substr(1);
};

Field.prototype.type = function(type) {
	if ( typeof(type) !== 'undefined' ) {	
	    this._type = type;
        return this;
    }
    return this._type;
};

Field.prototype.value = function(value) {
	if ( typeof(value) !== 'undefined' ) {	
	    this._value = value;
        return this;
    }
    return this._value;
};


function field(name, type) { return new Field(name, type); }

exports.Field = Field;
exports.field = field;
exports.Type = Type;
