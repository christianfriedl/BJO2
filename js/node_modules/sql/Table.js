/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var bjoo = require('BJOObject.js');
var _ = require('underscore');
var sql_Field = require('sql/Field.js');
var sql_LookupField = require('sql/LookupField.js');
var sql_ValueField = require('sql/ValueField.js');
var sql_ZoomField = require('sql/ZoomField.js');
var Errors = require('Errors.js');

function Table() {
    this._fields = {};
}

function create(name) { 
    /* @DEVELOPMENT { */ if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 1'); } /* @DEVELOMPENT } */ 
    const table = new Table(); 
    table.setName(name);
    return table;
}
Table.prototype = new bjoo.BJOObject();
Table.prototype.constructor = Table;

Table.prototype.getName = function() {
    return this._name;
};
Table.prototype.setName = function(name) {
    this._name = name;
    return this;
};

Table.prototype.getField = function(name) {
    return this._fields[name];
};

Table.prototype.addField = function(field) {
    /* @DEVELOPMENT */ if ( !(field instanceof sql_Field.Field) ) { throw new Errors.TypeError('field must be a sql_Field.Field'); }
    field.setTable(this);
    field.setSeq(_(this._fields).values().length);
    this._fields[field.getName()] = field;
    return this;
};

Table.prototype.getFields = function(fields) {
    return this._fields;
};
Table.prototype.setFields = function(/* Array(sql_Field.Field) */ fields) {
    /* @DEVELOPMENT */ if (!(fields instanceof Array)) { throw new Error('fields must be Array' + fields); }
    this._fields = {};
    _.each(fields, function(f) { this.addField(f); }, this);
    this._updateFieldReferences();
    return this;
};

Table.prototype._updateFieldReferences = function() {
    _.each(_.filter(this._fields, ( field ) => {
        return field.updateReferences !== undefined;
    }), (field ) => {
        field.updateReferences();
    });
};

Table.prototype.getFieldsAsList = function() {
    return _(this._fields).values();
};

Table.prototype.getDatabaseFields = function() {
    return _.filter(this.getFieldsAsList(), ( field ) => { 
        return !(field instanceof sql_LookupField.LookupField) && !(field instanceof sql_ZoomField.ZoomField); 
    });
};


Table.prototype.clone = function() {
    const table = new Table(this._name);
    table.setFields(_.map(this.getFieldsAsList(), ( field ) => { 
        return field.clone(); 
    }));
    return table;
};

exports.Table = Table;
exports.create = create;
