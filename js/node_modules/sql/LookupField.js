/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * DEPRECATED, but might be reinstated to create a normal field with a link
 * - we will use normal field + link + Table.labelFields
 *
 *
 *
 * A LookupField defines a field that has a lookup table behind it
 *
 * e.g. invoice.customerId has a fieldLink for customer to customer.id
 * then the lookupField also contains the information to display customer.name
 * NOTE that this will create its own fieldLink!
 *
 * so... invoice.field(m_sql_lookupField.lookupField('customerId', 1, 'Customer Id', customer.field('id'), customer.field('name'));
 */

"use strict";

var _ = require('underscore');

var util = require('util');
var m_util = require('util.js');
var m_sql_field = require('sql/field.js');
var m_sql_query = require('sql/query.js');
var m_sql_fieldLink = require('sql/fieldLink.js');

/**
 * 2 calling variants:
 * function LookupField(String name, object value, String label, m_sql_field.Field targetField) 
 * function LookupField(String name, object value, String label, m_sql_field.DataType dataType) 
 */
function LookupField(/* String */ name, /* object */ value, /* String */ label) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( !(m_util.isString(name)) ) { throw new Error('typecheck failed on name'); }  
            if ( !(m_util.isString(label)) ) { throw new Error('typecheck failed on label'); }  
            if ( arguments.length !== 4 ) {
                throw new Error('Illegal argument length '  + arguments.length + ', should be 4');
            }
            if ( !(arguments[3] instanceof m_sql_field.Field || _(m_sql_field.Type).contains(arguments[3])) ) { throw new Error('Typecheck failure: targetField|daaType should be of class m_sql_field.Field or m_sql_field.DataType: ' + util.inspect(targetField)); }
        /* @DEVELOMPENT } */
        if ( arguments[3] instanceof m_sql_field.Field ) {
            const targetField = arguments[3];
            m_sql_field.Field.call(this, name, targetField.dataType(), value, label);
        } else {
            const dataType = arguments[3];
            m_sql_field.Field.call(this, name, dataType, value, label);
        }
        if ( arguments.length === 5 ) {
            this._targetField = targetField;
            this._targetLabelField = targetLabelField;
        }
    } else {
        m_sql_field.Field.call(this);
    }
}

function lookupField() {
    if ( arguments.length > 0 ) {
        const f = new LookupField();
        LookupField.apply(f, Array.prototype.splice.call(arguments));
        return f;
    }  else {
        return new LookupField();
    }
}

LookupField.prototype = new m_sql_field.Field();
LookupField.prototype.constructor = LookupField;

LookupField.prototype.clone = function() {
    var f = new LookupField(this._name, this._value, this._label);
    if ( typeof(this._targetField) !== 'undefined') {
        f.targetField(this._targetField);
    };
    if ( typeof(this._targetLabelField) !== 'undefined') {
        f.targetLabelField(this._targetLabelField);
    };
    if ( typeof(this._link) !== 'undefined') {
        f.link(this._link);
    };
    f.table(this._table);
    f.isEditable(this._isEditable);
    f.isRequired(this._isRequired);
    f.links(this._links);
    f._id = this._id; // one exception to the use-the-setter-luke rule
    return f;
};

/**
 * getter/setter
 *
 * we can set the link of this lookupField either to another field, or set the link itself
 * -- in the first case, we will 
 * @param optional m_sql_field.Field|m_sql_fieldLink.FieldLink fieldOrLink
 * @return this|link
 */
LookupField.prototype.link = function(/* optional m_sql_field.Field */ fieldOrLink) {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 0 && arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 0 or 1'); }
    /* @DEVELOMPENT } */
    if ( arguments.length === 1 ) {
        /* @DEVELOPMENT { */
            // do typecheck
            if ( !(fieldOrLink instanceof m_sql_field.Field || fieldOrLink instanceof m_sql_fieldLink.FieldLink) ) { throw new Error('Typecheck failure: fieldOrLink should be of class m_sql_field.Field or m_sql_fieldLink.FieldLink: ' + fieldOrLink); }
        /* @DEVELOMPENT } */

        // actually set the data
        if ( fieldOrLink instanceof m_sql_field.Field ) { // field
            this._link = m_sql_fieldLink.fieldLink(this, fieldOrLink, m_sql_fieldLink.Type.manyToOne);
        } else { // link
            this._link = fieldOrLink;
        }
        return this;
    } else {
        return this._link;
    }
};

/**
 * getter for "our" linked table
 */
/*m_sql_fieldLink.FieldLink*/ LookupField.prototype.linkedTable = function() {
    return this.link().targetField().table();
};

/**
 * getter/setter
 */
LookupField.prototype.targetField = function(targetField) {
    if ( typeof(targetField) !== 'undefined' ) {
        this._targetField = targetField;
        return this;
    }
    return this._targetField;
};


/**
 * getter/setter
 */
LookupField.prototype.targetFieldName = function() {
    return this._targetField.name();
};

/**
 * getter/setter
 */
/*sql.Field/this*/ LookupField.prototype.targetLabelField = function(/*[sql.Field]*/ targetLabelField) {
    if ( typeof(targetLabelField) !== 'undefined') {
        this._targetLabelField = targetLabelField;
        return this;
    }
    return this._targetLabelField;
}

LookupField.prototype.targetlabelFieldName = function() {
    return this._targetLabelField.name();
};


/* NOTE: we will probably rarely use this, but it doesn't hurt... */
/*m_sql_query.Query*/ LookupField.prototype.query = function() {
    var q = m_sql_query.select()
        .fields([ this.link().targetField(), this._targetLabelField ])
        .from(this._targetLabelField.table());
    return q;
};

/*Object*/LookupField.prototype.toJson = function() {
    return { 
        className: this.constructor.name, 
        name: this._name, 
        dataType: this._dataType, 
        value: this._value, 
        label: this._label,
        seq: this._seq,
        isEditable: this._isEditable,
        isRequired: this._isRequired,
        targetFieldName: this._targetField.name(),
        targetLabelFieldName: this._targetLabelField.name()
    };
};


exports.LookupField = LookupField;
exports.lookupField = lookupField;
