/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var _ = require('lodash');

var util = require('util');
var Util = require('util.js');
var sql_Field = require('sql/Field.js');
var sql_Query = require('sql/Query.js');

function LookupField() {
    sql_Field.Field.call(this);
}

function create(/* String */ name, /* sql_Field.Field masterField */, masterModel) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 3 ) { throw new Error('arguments.length must be 3'); }
        /* @DEVELOMPENT } */
        const field = new LookupField();
        field.setName(name);
        field.setLabel(masterField.getLabel());
        field.setDataType(masterField.getDataType());
        field.setMasterModel(masterModel);
        return field;
    }  else {
        return new LookupField();
    }
}

exports.LookupField = LookupField;
exports.create = create;

LookupField.prototype = new sql_Field.Field();
LookupField.prototype.constructor = LookupField;

LookupField.prototype.clone = function() {
    throw 'not yet implemented';
};

/**
 * getter/setter
 */

LookupField.prototype.getMasterModel = function() {
    return this._masterModel;
};
LookupField.prototype.setName = function(/* sql_Field.Field */ masterModel) {
    this._masterModel = masterModel;
    return this;
};


/** 
 * other functions
 */

/**
 * load the entity by id and return it
 */
LookupField.prototype.getValue = function() {
    masterModel.loadEntityById(this._id).then( ( entity ) => {
    });
};

LookupField.prototype.setValue = function(/* model_EntityModel */ model) {
    this._id = model.getId();
};
