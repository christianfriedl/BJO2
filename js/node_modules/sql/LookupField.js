/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * this is a lookup field onto another entity's id
 * note that we cannot lookup onto any other field
 * we shall probably create a better version of this later on...
 */

"use strict";

var _ = require('lodash');

var util = require('util');
var Util = require('util.js');
var model_EntitySetModel = require('model/EntitySetModel.js');
const sql_Field = require('sql/Field.js');
var sql_ValueField = require('sql/ValueField.js');
var sql_Query = require('sql/Query.js');

function LookupField() {
    sql_ValueField.ValueField.call(this);
}

/**
 * @param name the name of this field
 * @param masterField the field we are linked to
 */
function create(/* String */ name, /* sql_LookupIdField.LookupIdField */ idField, /* model_EntitySetModel.EntitySetModel */ entitySetModel, /* String */ label) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 4 ) { throw new Error('arguments.length must be 4'); }
        /* @DEVELOMPENT } */
        const field = new LookupField();
        field.setName(name);
        // ??? TODO ??? 
        field.setDataType(sql_Field.DataType.int);
        field.setIdField(idField);
        field.setEntitySetModel(entitySetModel);
        field.setLabel(label);
        return field;
    }  else {
        return new LookupField();
    }
}

exports.LookupField = LookupField;
exports.create = create;

LookupField.prototype = new sql_ValueField.ValueField();
LookupField.prototype.constructor = LookupField;

LookupField.prototype.clone = function() {
    throw 'not yet implemented';
};

/**
 * getter/setter
 */

LookupField.prototype.getIdField = function() {
    return this._idField;
};
LookupField.prototype.setIdField = function(/* sql_LookupIdField */ idField) {
    this._idField = idField;
    return this;
};

LookupField.prototype.getEntitySetModel = function() {
    return this._entitySetModel;
};
LookupField.prototype.setEntitySetModel = function(/* model_EntitySetModel.EntitySetModel */ entitySetModel) {
    this._entitySetModel = entitySetModel;
    return this;
};

LookupField.prototype.getValue = function() {
    console.log('gv start');
    return this._idField.getValue().then( (id) => {
        if ( !id ) { throw new Error('no id for lookup field ' + this._name + ' (' + this._idField.getName() + ')'); }
        console.log('this._entitySetModel', this._entitySetModel);
        return this._entitySetModel.loadEntityById(id);
    }).done();
};

LookupField.prototype.setValue = function(/* model_EntityModel */ model) {
    sql_ValueField.ValueField.call(this, model);
    this._idField.setValue(model.getId());
};
