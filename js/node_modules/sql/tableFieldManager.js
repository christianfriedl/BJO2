/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 *
 * NOTE: the field is not fully created, it does not necessarily have a table attached!
strategy:
    - when applying all fields
        - if it is just a field
            - add it to its table
        - if it is a calcField
            - use corresponding LazyFieldLink
        - if it is a lookupField
            - use corresponding LazyFieldLink

 */

"use strict";

var bjoo = require('BJOObject.js');
var _ = require('underscore');
var m_sql_field = require('sql/field.js');

function TableFieldManager(/* m_sql_table.Table */ table) {
    bjoo.BJOObject.call(this);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */ 
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be 1'); } 
        /* @DEVELOMPENT } */ 
        this._table = table;
        this._descriptors = [];
    }
}

TableFieldManager.prototype = new bjoo.BJOObject();
TableFieldManager.prototype.constructor = TableFieldManager;

function tableFieldManager(/* m_sql_table.Table */ table) { 
    if ( arguments.length > 0 ) {
        return new TableFieldManager(table); 
    } else {
        return new TableFieldManager(); 
    }
}

exports.TableFieldManager = TableFieldManager;
exports.tableFieldManager = tableFieldManager;

///////////////////////////////////////////////////////////////////////

/** setter */
/* void */ TableFieldManager.prototype.field = function(/* m_sql_field.FieldDescriptor */ fieldDescriptor) {
    if ( typeof(fieldDescriptor) !== 'undefined' ) {
        this._descriptors.push(fieldDescriptor);
        return this;
    }
};

TableFieldManager.prototype.apply = function() {
    let links = [];
    // normal fields
    _(_(this._descriptors).filter( (desc) => {
        return ( (desc instanceof m_sql_field.Field) && !(desc instanceof m_sql_calcField.CalcField) && !(desc instanceof m_sql_lookupField.LookupField) );
    })).each( (desc) => {
        // function Field(/*String*/name, /*m_sql_field.DataType*/dataType, /*[Object]*/value, /*[String]*/label) {
        this._table.field(m_sql_field.field(desc.name, desc.dataType, null, desc.label));
    });;

    // calc fields
    _(_(this._descriptors).filter( (desc) => {
        return ( desc instanceof m_sql_calcField.CalcField );
    })).each( (desc) => {
        // function CalcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /* string */ label, /* CalcType */ calcType, /* OPTIONAL m_sql_field.Field */ sumField, /* OPTIONAL m_sql_field.Field */ byField) {
        this._table.field(m_sql_calcField.calcField(desc.name, desc.dataType, null, desc.label, desc.calcType));
        links.push(m_lazyCalcFieldLink.lazyCalcFieldLinkFromFieldDescriptor(desc));
    });;

    // lookup fields
    _(_(this._descriptors).filter( (desc) => {
        return ( desc instanceof m_sql_lookupField.LookupField );
    })).each( (desc) => {
        this._table.field(m_sql_lookupField.lookupField(desc.name, desc.dataType, null, desc.label));
        links.push(m_lazyLookupFieldLink.lazyLookupFieldLinkFromFieldDescriptor(desc));
    });;

    _(links).each( (link) => {
        link.apply();
    });
};
