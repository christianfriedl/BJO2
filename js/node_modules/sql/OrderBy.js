/*
 * Copyright (C) 2015-2017 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

const _ = require('lodash');
const bjoo = require('BJOObject.js');
const sql_Table = require('sql/Table.js');
const sql_ValueField = require('sql/ValueField.js');
const sql_OrderByField = require('sql/OrderByField.js');

/*
 * an orderby is a list of fields plus their respective ASC/DESC attributes
 * - every "field" in our .fields collection is an sql_OrderByField.OrderBField
 * - every such field contains a sql_ValueField.ValueField, and a direction
 */

const Direction = { asc: 'asc', desc: 'desc' };

/**
 * fetch Direction by its name
 */
function directionByName(name) {
    if ( typeof(name) === 'undefined' ) {
        return Direction.asc;
    }
    return _(_(Direction).keys()).find(function(k) { return Direction[k] === name; });
}

/**
 * we accept as argument an array of sql_OrderBy.OrderByField, NOT sql_ValueField.ValueField!!!
 */
function OrderBy(/* optional Array(sql_OrderByField.OrderByField) */ fields) {
    bjoo.BJOObject.apply(this);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
            if ( !(fields instanceof Array) ) { throw new Error('Typecheck failure: fields should be of class Array: ' + fields); }
        /* @DEVELOMPENT } */

        this._fields = fields;
    } else {
        this._fields = [];
    }
}

function create(/* optional Array(sql_OrderByField.OrderByField) */ fields) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
            if ( !(fields instanceof Array) ) { throw new Error('Typecheck failure: fields should be of class Array: ' + fields); }
        /* @DEVELOMPENT } */

        return new OrderBy(fields);
    } else {
        return new OrderBy();
    }
}

/**
 * given a sql_Table.Table, and an array of orderby descriptors, we will create an OrderBy
 */
function createFromWeb(/* sql_table.Table */ table, /* Array */ webOB) {
    /* @DEVELOPMENT { */
        if ( arguments.length < 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
        if ( !(table instanceof sql_Table.Table) ) { throw new Error('Typecheck failure: table should be of class sql_table.Table: ' + table); }
        if ( !(typeof(webOB) === 'undefined' || webOB instanceof Array) ) { throw new Error('Typecheck failure: webOB should be of class Array: ' + webOB); }
    /* @DEVELOMPENT } */

    if ( typeof(webOB) === 'undefined' ) {
        return undefined;
    }
    
    var ob = create();
    
    _(webOB).each(function(w) { ob.addField(sql_OrderByField.create(table.getField(w.field), w.direction ? directionByName(w.direction) : Direction.asc)); });
    return ob;
}

OrderBy.prototype = new bjoo.BJOObject();
OrderBy.prototype.constructor = OrderBy;

OrderBy.prototype.setFields = function(fields) {
    this._fields = fields;
    return this;
}
OrderBy.prototype.getFields = function() {
    return this._fields;
};

OrderBy.prototype.addField = function(/* sql_OrderByField.OrderByField */ field) {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
        if ( !(field instanceof sql_OrderByField.OrderByField) ) { throw new Error('Typecheck failure: fields should be of class sql_OrderBy.Field: ' + field); }
    /* @DEVELOMPENT } */

    this._fields.push(field);
};


exports.OrderBy = OrderBy;
exports.create = create;
exports.createFromWeb = createFromWeb;
exports.Direction = Direction;
exports.directionByName = directionByName;
