/*
 * A LookupField defines the lookup into one of its own links
 *
 * e.g. invoice.customerId has a fieldLink for customer to customer.id
 * then the lookupField also contains the information to display customer.name
 */

"use strict";

var _ = require('underscore');

var m_sql_field = require('sql/field.js');
var m_sql_query = require('sql/query.js');

/**
 * @param {Field} p_targetLabelField the field from which we will fetch the labels to display on the selectbox or whatever
 */
function LookupField(/*String*/p_name, /*m_sql_field.DataType*/p_dataType, /*Object*/p_value, 
        /*String*/p_label, /*m_sql_field.Field*/p_targetLabelField) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT */if ( arguments.length !== 5 ) { throw new Error('Illegal argument length'); }
        m_sql_field.Field.call(this, p_name, p_dataType, p_value, p_label);
        this._targetLabelField = p_targetLabelField;
        this._options = {}; // value -> label
    } else {
        m_sql_field.Field.call(this);
    }
    this._className = 'sql.LookupField';
}

LookupField.prototype = new m_sql_field.Field();
LookupField.prototype.constructor = LookupField;

LookupField.prototype.clone = function() {
    var f = new LookupField(this._name, this._dataType, this._value, this._label, this._targetLabelField);
    f.table(this._table);
    f.isEditable(this._isEditable);
    f.isRequired(this._isRequired);
    f.links(this._links);
    f._targetLabelField = this._targetLabelField;
    f._options = this._options;
    return f;
};

/**
 * getter/setter
 */
LookupField.prototype.options = function(/*Array(Object{value->label})*/ p_options) {
    if ( typeof(p_options) !== 'undefined' ) {
        this._options = p_options;
        return this;
    }
    return this._options;
};

LookupField.prototype.addOption = function(/*String*/ p_label, /*BJOObject*/ p_value) {
    this._options[p_value] = p_label;
};

/**
 * getter for "our" link
 */
/*m_sql_fieldLink.FieldLink*/ LookupField.prototype.tableLink = function() {
    return this.link(this._targetLabelField.table());
};
/**
 * getter, helps the fetching
 */
LookupField.prototype.valueFieldName = function() {
    return this.tableLink().targetField().name();
};

LookupField.prototype.labelFieldName = function() {
    return this._targetLabelField.name();
};

/*m_sql_query.Query*/LookupField.prototype.query = function() {
    var q = m_sql_query.select()
        .fields([ this.tableLink().targetField(), this._targetLabelField ])
        .from(this._targetLabelField.table());
    return q;
};

function lookupField(/*String*/p_name, /*m_sql_field.DataType*/p_dataType, /*BJOObject*/p_value, /*String*/p_label, /*Field*/p_targetLabelField) { return new LookupField(p_name, p_dataType, p_value, p_label, p_targetLabelField); }

exports.LookupField = LookupField;
exports.lookupField = lookupField;
