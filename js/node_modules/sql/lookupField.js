/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * A LookupField defines the lookup into one of its own links
 *
 * e.g. invoice.customerId has a fieldLink for customer to customer.id
 * then the lookupField also contains the information to display customer.name
 */

"use strict";

var _ = require('underscore');

var util = require('util.js');
var m_sql_field = require('sql/field.js');
var m_sql_query = require('sql/query.js');

/**
 * @param {Field} p_targetLabelField the field from which we will fetch the labels to display on the selectbox or whatever
 */
function LookupField(/*String*/p_name, /*m_sql_field.DataType*/p_dataType, /*Object*/p_value, 
        /*String*/p_label, /*m_sql_field.Field*/p_targetLabelField) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 5 ) { throw new Error('Illegal argument length'); }
            if ( !(util.isString(p_name)) ) { throw new Error('typecheck failed on p_name'); }  
            if ( !(util.isString(p_dataType)) ) { throw new Error('typecheck failed on p_dataType'); }  
            if ( !(util.isString(p_label)) ) { throw new Error('typecheck failed on p_label'); }  
            if ( !(p_targetLabelField instanceof m_sql_field.Field || p_targetLabelField === null) ) { throw new Error('typecheck failed on p_targetLabelField'); }  
        /* @DEVELOMPENT } */
        m_sql_field.Field.call(this, p_name, p_dataType, p_value, p_label);
        this._targetLabelField = p_targetLabelField;
        this._options = {}; // value -> label
    } else {
        m_sql_field.Field.call(this);
    }
    this._className = 'sql.LookupField';
}

LookupField.prototype = new m_sql_field.Field();
LookupField.prototype.constructor = LookupField;

LookupField.prototype.clone = function() {
    var f = new LookupField(this._name, this._dataType, this._value, this._label, this._targetLabelField);
    f.table(this._table);
    f.isEditable(this._isEditable);
    f.isRequired(this._isRequired);
    f.links(this._links);
    f._targetLabelField = this._targetLabelField;
    f._options = this._options;
    return f;
};

/**
 * getter/setter
 */
LookupField.prototype.options = function(/*Array(Object{value->label})*/ p_options) {
    if ( typeof(p_options) !== 'undefined' ) {
        this._options = p_options;
        return this;
    }
    return this._options;
};

LookupField.prototype.addOption = function(/*String*/ p_label, /*BJOObject*/ p_value) {
    this._options[p_value] = p_label;
};

/**
 * getter for "our" link
 */
/*m_sql_fieldLink.FieldLink*/ LookupField.prototype.tableLink = function() {
    return this.link(this._targetLabelField.table());
};
/**
 * getter, helps the fetching
 */
LookupField.prototype.valueFieldName = function() {
    return this.tableLink().targetField().name();
};

LookupField.prototype.labelFieldName = function() {
    return this._targetLabelField.name();
};

/**
 * getter/setter
 */
/*sql.Field/this*/ LookupField.prototype.targetLabelField = function(/*[sql.Field]*/ p_targetLabelField) {
    if ( typeof(p_targetLabelField) !== 'undefined') {
        this._targetLabelField = p_targetLabelField;
        return this;
    }
    return this._targetLabelField;
}

/*m_sql_query.Query*/LookupField.prototype.query = function() {
    var q = m_sql_query.select()
        .fields([ this.tableLink().targetField(), this._targetLabelField ])
        .from(this._targetLabelField.table());
    return q;
};

/*Object*/LookupField.prototype.webize = function() {
    return { 
        className: this._className, 
        name: this._name, 
        dataType: this._dataType, 
        value: this._value, 
        label: this._label,
        seq: this._seq,
        isEditable: this._isEditable,
        isRequired: this._isRequired,
        links: this._linksWebized(),
        options: this._options
    };
};

function lookupField(/*String*/p_name, /*m_sql_field.DataType*/p_dataType, /*BJOObject*/p_value, /*String*/p_label, /*Field*/p_targetLabelField) { if ( arguments.length > 0 ) { return new LookupField(p_name, p_dataType, p_value, p_label, p_targetLabelField); } else { return new LookupField(); } }

exports.LookupField = LookupField;
exports.lookupField = lookupField;
