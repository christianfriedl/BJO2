/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * A LookupField defines a field that has a lookup table behind it
 *
 * e.g. invoice.customerId has a fieldLink for customer to customer.id
 * then the lookupField also contains the information to display customer.name
 * NOTE that this will create its own fieldLink!
 *
 * so... invoice.field(m_sql_lookupField.lookupField('customerId', 1, 'Customer Id', customer.field('id'), customer.field('name'));
 */

"use strict";

var _ = require('underscore');

var util = require('util.js');
var m_sql_field = require('sql/field.js');
var m_sql_query = require('sql/query.js');
var m_sql_fieldLink = require('sql/fieldLink.js');
var util = require('util');

function LookupField(/* String */ name, /* object */ value, /* String */ label, /* m_sql_field.Field */ targetField, /* m_sql_field.Field */ targetLabelField) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length === 3) { 
                if ( !(util.isString(name)) ) { throw new Error('typecheck failed on name'); }  
                if ( !(util.isString(label)) ) { throw new Error('typecheck failed on label'); }  
            } else if ( arguments.length === 5 ) {
                if ( !(util.isString(name)) ) { throw new Error('typecheck failed on name'); }  
                if ( !(util.isString(label)) ) { throw new Error('typecheck failed on label'); }  
                if ( !(targetField instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: targetField should be of class m_sql_field.Field: ' + util.inspect(targetField)); }
                if ( !(targetLabelField instanceof m_sql_field.Field) ) { throw new Error('typecheck failed on targetLabelField'); }
            } else {
                throw new Error('Illegal argument length ' + arguments.length); }
            }
        /* @DEVELOMPENT } */
        m_sql_field.Field.call(this, name, m_sql_field.DataType.lookup, value, label);
        if ( arguments.length === 5 ) {
            this.link(m_sql_fieldLink.fieldLink(this, targetField, m_sql_fieldLink.Type.manyToOne));
            this._targetLabelField = targetLabelField;
        }
    } else {
        m_sql_field.Field.call(this);
    }
}

function lookupField(/* String */ name, /* object */ value, /* String */ label, /* m_sql_field.Field */ targetField, /* m_sql_field.Field */ targetLabelField) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 5 ) { throw new Error('Illegal argument length ' + arguments.length); }
            if ( !(util.isString(name)) ) { throw new Error('typecheck failed on name'); }  
            if ( !(util.isString(label)) ) { throw new Error('typecheck failed on label'); }  
            if ( !(targetField instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: targetField should be of class m_sql_field.Field: ' + util.inspect(targetField)); }
            if ( !(targetLabelField instanceof m_sql_field.Field) ) { throw new Error('typecheck failed on targetLabelField'); }
        /* @DEVELOMPENT } */

        return new LookupField(name, value, label, targetField, targetLabelField);
    } else {
        return new LookupField();
    }
}

LookupField.prototype = new m_sql_field.Field();
LookupField.prototype.constructor = LookupField;

LookupField.prototype.clone = function() {
    var f = new LookupField(this._name, this._value, this._label, this._link.targetField(), this._targetLabelField);
    f.table(this._table);
    f.isEditable(this._isEditable);
    f.isRequired(this._isRequired);
    f.links(this._links);
    f._targetLabelField = this._targetLabelField;
    f._id = this._id; // one exception to the use-the-setter-luke rule
    return f;
};

/**
 * getter for "our" linked table
 */
/*m_sql_fieldLink.FieldLink*/ LookupField.prototype.linkedTable = function() {
    return this.link().targetField().table();
};

/**
 * getter/setter
 */

/* void/m_sql_fieldLink.FieldLink */ LookupField.prototype.link = function(/* optional m_sql_fieldLink.FieldLink */ link) {
    if ( typeof(link) !== 'undefined' ) {
        this._link = link;
        return this;
    }
    return this._link;
}

/**
 * getter, helps the fetching
 */
LookupField.prototype.targetFieldName = function() {
    return this.link().targetField().name();
};

LookupField.prototype.labelFieldName = function() {
    return this._targetLabelField.name();
};

LookupField.prototype.targetField = function() {
    return this.link().targetField();
};
/**
 * getter/setter
 */
/*sql.Field/this*/ LookupField.prototype.targetLabelField = function(/*[sql.Field]*/ targetLabelField) {
    if ( typeof(targetLabelField) !== 'undefined') {
        this._targetLabelField = targetLabelField;
        return this;
    }
    return this._targetLabelField;
}

/* NOTE: we will probably rarely use this, but it doesn't hurt... */
/*m_sql_query.Query*/ LookupField.prototype.query = function() {
    var q = m_sql_query.select()
        .fields([ this.link().targetField(), this._targetLabelField ])
        .from(this._targetLabelField.table());
    return q;
};

/*Object*/LookupField.prototype.webize = function() {
    return { 
        className: this.constructor.name, 
        name: this._name, 
        dataType: this._dataType, 
        value: this._value, 
        label: this._label,
        seq: this._seq,
        isEditable: this._isEditable,
        isRequired: this._isRequired,
        targetFieldName: this.link().targetField().name(),
        targetLabelFieldName: this._targetLabelField.name()
    };
};


exports.LookupField = LookupField;
exports.lookupField = lookupField;
