/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var _ = require('lodash');
var q = require('q');

const sql_Field = require('sql/Field.js');

function ValueField(/* String */ name, /* sql_Field.DataType */ dataType, /* optional String */ label, /* optional Object */ value) {
    if ( arguments.length > 0 ) {
        sql_Field.Field.call(this, name, dataType, label);
        if ( typeof(value) !== 'undefined' ) {
            this._value = value;
        } else {
            this._value = null;
        }
        this._isPersistent = true;
    } else {
        sql_Field.Field.call(this);
    }
}

function create(/* String */ name, /* sql_Field.DataType */ dataType, /* optional String */ label, /* optional Object */ value) {
    if ( arguments.length > 0 ) { return new ValueField(name, dataType, label, value); } else { return new ValueField(); }
}

function fromField(/* sql_Field.Field */ field) { // TODO remove from everywhere
    const field2 = create(field.getName(), field.getDataType(), field.getLabel(), undefined);
    field2.setTable(field.getTable());
    return field2;
}

ValueField.prototype = new sql_Field.Field();
ValueField.prototype.constructor = ValueField;

exports.ValueField = ValueField;
exports.create = create;
exports.fromField = fromField;

/**
 * we return a promise for our value
 */
ValueField.prototype.getValue = function() {
    return q(this._value);
};
ValueField.prototype.setValue = function(value) {
    this._value = value;
    return this;
};

ValueField.prototype.clone = function() {
    return create(this._name, this._dataType, this._label, this._value);
};
