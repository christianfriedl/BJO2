var _ = require('underscore');

var m_sql_field = require('sql/field.js');
var m_sql_query = require('sql/query.js');
var m_sql_aggregate = require('sql/aggregate.js');
var m_sql_condition = require('sql/condition.js');

var CalcType = { sum: 'sum' };

/*
 * byField is the (id) field by which to set up the link to the other table for the sum etc
 */
function CalcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /*m_sql_calcField.CalcType*/ calcType, /*{[String label], [m_sql_field.Field sumField], [byField: m_sql_field.field]}*/ options) {
    var args = Array.prototype.slice.call(arguments);
    args.push(undefined); // value // TODO this is an ugly idiom
    if ( typeof(options.label) !== 'undefined' ) {// TODO this is an ugly idiom
        args.push(options.label);
    }
    m_sql_field.Field.apply(this,  args); // TODO is slice necessary for arguments?
    this._calcType = calcType;
    if ( typeof(options.sumField) !== 'undefined' ) {
        this._sumField = options.sumField;
    }
    if ( typeof(options.byField) !== 'undefined' ) {
        this._byField = options.byField;
    }
    this._isEditable = false; // TODO is not yet evaluated anywhere
    this._conditions = [];
}

CalcField.prototype = new m_sql_field.Field();
CalcField.prototype.constructor = CalcField;


CalcField.prototype.value = function(/*cannot set value of calced field*/) {
};
CalcField.prototype.query = function(/*cannot set value of calced field*/) {
    switch ( this._calcType ) {
        case CalcType.sum:
            if ( typeof(this._sumField) === 'undefined' ) {
                throw new Error('calcField of calcType "sum" requires sumField to be set');
            }
            var agg = m_sql_aggregate.aggregate(m_sql_aggregate.Type.sum, this._sumField);
            var link = this._byField.link(this);
            var q = m_sql_query.select()
                .tables( [this._table, link.targetField().table()] )
                .fields([agg])
                .where(m_sql_condition.condition(link.sourceField(), m_sql_condition.Op.eq, link.targetField()));
            if ( this._conditions.length > 0 ) {
                _(this._conditions).each(function(c) { q.where(c); });
            }
            return q;
            break;
        default: 
            throw new Error('no such calcType as ' + this._calcType);
    }
};

/*
 * the field by which to set up the join condition
 */
CalcField.prototype.byField = function(/*Array(m_sql_field.Field)*/byField) {
	if ( typeof(byField) !== 'undefined' ) {	
	    this._byField = byField;
        return this;
    }
    return this._byField;
};

CalcField.prototype.conditions = function(conditions) {
    if ( typeof(conditions) !== 'undefined' ) {
        this._conditions = conditions;
        return this;
    }
    return this._conditions;
};


function calcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /*m_sql_calcField.CalcType*/ calcType, /*{[Object value], [String label], [m_sql_field.Field sumField]}*/ options) { return new CalcField(name, dataType, calcType, options); }

exports.CalcField = CalcField;
exports.CalcType = CalcType;
exports.calcField = calcField;
