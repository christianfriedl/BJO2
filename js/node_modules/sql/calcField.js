/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var _ = require('underscore');
var util = require('util.js');

var m_sql_field = require('sql/field.js');
var m_sql_query = require('sql/query.js');
var m_sql_aggregate = require('sql/aggregate.js');
var m_sql_condition = require('sql/condition.js');

var CalcType = { sum: 'sum' };

/*
 * byField is the (id) field by which to set up the link to the other table for the sum etc
 */
function CalcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /*m_sql_calcField.CalcType*/ calcType, /*{[String label], [m_sql_field.Field sumField], [byField: m_sql_field.field]}*/ options) {
    if ( arguments.length > 0 ) {
        var args = Array.prototype.slice.call(arguments);
        if ( typeof(options) !== 'undefined' ) {
            args.pop();
        }
        args.push(undefined); // value // TODO this is an ugly idiom
        if ( typeof(options.label) !== 'undefined' ) {// TODO this is an ugly idiom
            args.push(options.label);
        }
        m_sql_field.Field.apply(this,  args);
        this._calcType = calcType;
        if ( typeof(options.sumField) !== 'undefined' ) {
            this._sumField = options.sumField;
        }
        if ( typeof(options.byField) !== 'undefined' ) {
            this._byField = options.byField;
        }
        /* @DEVELOPMENT { */
            if ( arguments.length < 3 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be at least 3'); }  
            if ( !(util.isString(name)) ) { throw new Error('typecheck failed on name'); }  
            if ( !(util.isString(dataType)) ) { throw new Error('typecheck failed on dataType'); }  
            if ( !(util.isString(calcType)) ) { throw new Error('typecheck failed on calcType'); }  
        /* @DEVELOMPENT } */
        this._isEditable = false; // TODO is not yet evaluated anywhere
        this._conditions = [];
        this._options = options; // TODO later evaluate options straight from the _options object, just keeping the checks in the constructor
    } else {
        m_sql_field.Field.call(this);
    }
    this._className = 'sql.CalcField';
}

CalcField.prototype = new m_sql_field.Field();
CalcField.prototype.constructor = CalcField;

CalcField.prototype.clone = function() {
    var f = new CalcField(this._name, this._dataType, this._calcType, this._options);
    f._isEditable = false;
    f._conditions = this._conditions;
    f._sumField = this._sumField;
    f._byField = this._byField;
    f._guid = this._guid;
    f.table(this._table);
    return f;
};

CalcField.prototype.query = function() {
    switch ( this._calcType ) {
        case CalcType.sum:
            if ( typeof(this._sumField) === 'undefined' ) {
                throw new Error('calcField of calcType "sum" requires sumField to be set');
            }
            var agg = m_sql_aggregate.aggregate(m_sql_aggregate.Type.sum, this._sumField);
            agg.alias(this._name);
            var link = this._byField.link(this._table); // byField is the field by which we form the link
            var q = m_sql_query.select()
                .tables( [this._table, link.targetField().table()] )
                .fields([agg])
                .where(m_sql_condition.condition(link.sourceField(), m_sql_condition.Op.eq, link.targetField()));
            if ( this._conditions.length > 0 ) {
                _(this._conditions).each(function(c) { q.where(c); });
            }
            return q;
            break;
        default: 
            throw new Error('no such calcType as ' + this._calcType);
    }
};

/*
 * the field by which to set up the join condition
 */
CalcField.prototype.byField = function(/*Array(m_sql_field.Field)*/byField) {
	if ( typeof(byField) !== 'undefined' ) {	
	    this._byField = byField;
        return this;
    }
    return this._byField;
};

CalcField.prototype.conditions = function(conditions) {
    if ( typeof(conditions) !== 'undefined' ) {
        this._conditions = conditions;
        return this;
    }
    return this._conditions;
};


function calcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /*m_sql_calcField.CalcType*/ calcType, /*{[Object value], [String label], [m_sql_field.Field sumField]}*/ options) { return new CalcField(name, dataType, calcType, options); }

exports.CalcField = CalcField;
exports.CalcType = CalcType;
exports.calcField = calcField;
