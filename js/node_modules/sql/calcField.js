var m_sql_field = require('sql/field.js');

var CalcType = { sum: 'sum' };

function CalcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /*m_sql_calcField.CalcType*/ calcType, /*{[String label], [m_sql_field.Field sumField]}*/ options) {
    var args = Array.prototype.slice.call(arguments);
    args.push(undefined); // value // TODO this is an ugly idiom
    if ( typeof(options.label) !== 'undefined' ) {// TODO this is an ugly idiom
        args.push(options.label);
    }
    m_sql_field.Field.apply(this,  args); // TODO is slice necessary for arguments?
    this._calcType = calcType;
    if ( typeof(options.sumField) !== 'undefined' ) {// TODO this is an ugly idiom
        this._sumField = options.sumField;
    }
    this._isEditable = false; // TODO is not yet evaluated anywhere
}

CalcField.prototype = new m_sql_field.Field();
CalcField.prototype.constructor = CalcField;


CalcField.prototype.value = function(/*cannot set value of calced field*/) {
    switch ( this._calcType ) {
        case CalcType.sum:
            if ( typeof(this._sumField) === 'undefined' ) {
                throw new Error('calcField of calcType "sum" requires sumField to be set');
            }
            break;
        default: 
            throw new Error('no such calcType as ' + this._calcType);
    }
};

function calcField(/*String*/name, /*m_sql_field.DataType*/ dataType, /*m_sql_calcField.CalcType*/ calcType, /*{[Object value], [String label], [m_sql_field.Field sumField]}*/ options) { return new CalcField(name, dataType, calcType, options); }

exports.CalcField = CalcField;
exports.CalcType = CalcType;
exports.calcField = calcField;
