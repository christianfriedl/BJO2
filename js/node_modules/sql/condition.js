var _ = require('underscore');

var Op = { eq: 'eq', gt: 'gt', lt: 'lt', gte: 'gte', lte: 'lte', ne: 'ne', like: 'like' };

function Condition(field, op, compareTo) {
    this._className = 'sql.Condition';
    this._field = field;
    this._op = op;
    this._compareTo = compareTo;
}

Condition.prototype.field = function(field) {
    if ( typeof(field) !== 'undefined' ) {
        this._field = field;
        return this;
    }
    return this._field;
};

Condition.prototype.op = function(op) {
    if ( typeof(op) !== 'undefined' ) {
        this._op = op;
        return this;
    }
    return this._op;
};

/**
 * @param compareTo field or value
 */
Condition.prototype.compareTo = function(compareTo) {
    if ( typeof(compareTo) !== 'undefined' ) {
        this._compareTo = compareTo;
        return this;
    }
    return this._compareTo;
};

Condition.prototype.compareToValue = function() {
    if ( typeof(this._compareTo._className) !== 'undefined' && this._compareTo.className() === 'sql.Field' ) {
        return this._compareTo.value();
    } else {
        return this._compareTo;
    }
};

function condition(field, op, compareTo) { return new Condition(field, op, compareTo); }

function opFromName(name) { return _(Op).invert()[name]; }
function opNames() { return _(Op).keys(); }

function conditionsFromWeb(p_table, p_requestConditions) {
    if ( typeof(p_requestConditions) === 'undefined' || p_requestConditions === null ) {
        return [];
    }
    console.log('####y p_req', p_requestConditions, _(p_requestConditions).map(function(c) {
        return condition(p_table.field(c.fieldName), opFromName(c.opName), c.value);
    }));
    return _(p_requestConditions).map(function(c) {
        return condition(p_table.field(c.fieldName), opFromName(c.opName), c.value);
    });
}


exports.condition = condition;
exports.Op = Op;
exports.opFromName = opFromName;
exports.opNames = opNames;
exports.conditionsFromWeb = conditionsFromWeb;
