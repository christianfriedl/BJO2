/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * A boSetField just holds a boSet, plus label, plus names of the frontend module/controller/action, that the
 * frontend should then use per default...
 * plus the targetIdField, so the frontend can createa a lookup window -> fieldLink ( srcField, tgtField)
 *
 * Useful for lookups in large tables, since the data will only be fetched from the bo (lazily)
 */

"use strict";

var _ = require('underscore');

var util = require('util.js');
var m_sql_field = require('sql/field.js');
var m_bo_boSet = require('bo/boSet.js');

/**
 * @param {Field} targetLabelField the field from which we will fetch the labels to display on the selectbox or whatever
 */
function BoSetField(/*String*/name, /* m_bo_boSet.BoSet */ value, /*String*/label, /* m_sql_fieldLink.FieldLink */ fieldLink) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 4 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 4); }
            if ( !(boSet instanceof m_bo_boSet.BoSet) ) { throw new Error('Typecheck failure: boSet should be of class m_bo_boSet.BoSet: ' + boSet); }
        /* @DEVELOMPENT } */
        m_sql_field.Field.call(this, name, m_sql_field.DataType.boSet, value, label);
        this._boSet = boSet;
        this._fieldLink = fieldLink;
        this._isDatabaseField = false;
    } else {
        m_sql_field.Field.call(this);
    }
}

function boSetField(/*String*/ name, /* m_bo_boSet.BoSet */ value, /*String*/ label, /* m_sql_fieldLink.FieldLink */ fieldLink) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 4 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 4); }
            if ( !(boSet instanceof m_bo_boSet.BoSet) ) { throw new Error('Typecheck failure: boSet should be of class m_bo_boSet.BoSet: ' + boSet); }
        /* @DEVELOMPENT } */
        return new BoSetField(name, value, label, fieldLink);
    } else {
        return new BoSetField();
    }
}

BoSetField.prototype = new m_sql_field.Field();
BoSetField.prototype.constructor = BoSetField;

BoSetField.prototype.clone = function() {
    var f = new BoSetField(this._name, this._value, this._label, this._fieldLink);
    f._id = this._id; // one exception to the use-the-setter-luke rule
    return f;
};

/**
 * getter/setter
 */
BoSetField.prototype.boSet = function(/* optional m_bo_boSet */ boSet) {
    if ( typeof(boSet) !== 'undefined' ) {
        this._boSet = boSet;
        return this;
    }
    return this._boSet;
};

/**
 * getter/setter
 */
BoSetField.prototype.fieldLink = function(/* optional m_bo_fieldLink.FieldLink */ fieldLink) {
    if ( typeof(fieldLink) !== 'undefined' ) {
        this._fieldLink = fieldLink;
        return this;
    }
    return this._fieldLink;
};

/**
 * getter/setter
 */
BoSetField.prototype.frontendOptions = function(/* optional Object */ frontendOptions) {
    if ( typeof(frontendOptions) !== 'undefined' ) {
        this._frontendOptions = frontendOptions;
        return this;
    }
    return this._frontendOptions;
};

exports.BoSetField = BoSetField;
exports.boSetField = boSetField;
