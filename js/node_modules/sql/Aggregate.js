/*
 * Copyright (C) 2015-2017 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

const Util = require('Util.js');
const bjoo = require('BJOObject.js');

const Type = { sum: 'sum', count: 'count', min: 'min', max: 'max' };

function Aggregate(type, field) {
    /* @DEVELOPMENT */ if ( arguments.length !== 2 ) { throw new Error('Illegal argument length '  + arguments.length); }  
    /* @DEVELOPMENT */ if ( !(Util.isString(type)) ) { throw new Error('typecheck failed'); }
    this._type = type;
    this._field = field;
    this._alias = null;
}

function sum(field) { return new Aggregate(Type.sum, field); }
function count(field) { return new Aggregate(Type.count, field); }
function min(field) { return new Aggregate(Type.min, field); }
function max(field) { return new Aggregate(Type.max, field); }
function aggregate(type, field) { return new Aggregate(type, field); }
function create(type, field) { return new Aggregate(type, field); }

exports.Type = Type;
exports.Aggregate = Aggregate;
exports.aggregate = aggregate;
exports.create = create;
exports.sum = sum;
exports.count = count;
exports.min = min;
exports.max = max;

Aggregate.prototype = new bjoo.BJOObject();
Aggregate.prototype.constructor = Aggregate;

Aggregate.prototype.getType = function() {
    return this._type;
};
Aggregate.prototype.setType = function(type) {
    this._type = type;
    return this;
};

Aggregate.prototype.getField = function() {
    return this._field;
};
Aggregate.prototype.setField = function(field) {
    this._field = field;
    return this;
};

Aggregate.prototype.getAlias = function() {
    return this._alias;
};
Aggregate.prototype.alias = function(alias) {
    this._alias = alias;
    return this;
};

