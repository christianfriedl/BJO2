/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 */

"use strict";

const _ = require('lodash');
const q = require('q');

const model_EntitySetModel = require('model/EntitySetModel.js');
const sql_Query = require('sql/Query.js');
const sql_Field = require('sql/Field.js');
const sql_Table = require('sql/Table.js');
const sql_ConditionSet = require('sql/ConditionSet.js');
const sql_Aggregate = require('sql/Aggregate.js');
const sql_Filter = require('sql/Filter.js');

function MaxField() {
    sql_Field.Field.call(this);
}

/**
 */
function create(/* String */ name, /* sql_Field.Field */ idField, /* model_EntitySetModel.EntitySetModel */ entitySetModel, /* sql_Field.Field */ referencedIdField, /* sql_Field.Field */ aggregatedField, /* String */ label) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 6 ) { throw new Error('arguments.length must be 6'); }
        /* @DEVELOMPENT } */
        const field = new MaxField();
        field.setName(name);
        field.setDataType(sql_Field.DataType.int); // ??? TODO ??? 
        field.setIdField(idField);
        field.setEntitySetModel(entitySetModel);
        field.setReferencedIdField(referencedIdField);
        field.setAggregatedField(aggregatedField);
        field.setLabel(label);
        field.setIsPersistent(false);
        return field;
    }  else {
        return new MaxField();
    }
}

exports.MaxField = MaxField;
exports.create = create;

MaxField.prototype = new sql_Field.Field();
MaxField.prototype.constructor = MaxField;

MaxField.prototype.clone = function() {
    return create(this._name, this._idField, this._entitySetModel, this._referencedIdField, this._aggregatedField, this._label); 
};

/**
 * getter/setter
 */

MaxField.prototype.getIdField = function() {
    return this._idField;
};
MaxField.prototype.setIdField = function(/* sql_Field */ idField) {
    this._idField = idField;
    return this;
};

MaxField.prototype.getEntitySetModel = function() {
    return this._entitySetModel;
};
MaxField.prototype.setEntitySetModel = function(/* model_EntitySetModel.EntitySetModel */ entitySetModel) {
    this._entitySetModel = entitySetModel;
    return this;
};

MaxField.prototype.getReferencedIdField = function() {
    return this._referencedIdField;
};
MaxField.prototype.setReferencedIdField = function(/* sql_Field */ referencedIdField) {
    this._referencedIdField = referencedIdField;
    return this;
};

MaxField.prototype.getAggregatedField = function() {
    return this._aggregatedField;
};
MaxField.prototype.setAggregatedField = function(/* sql_Field */ aggregatedField) {
    this._aggregatedField = aggregatedField;
    return this;
};

/**
 * @return [ promise(entity) ]
 */
MaxField.prototype.getValue = function() {
    return this._idField.getValue().then( (id) => {
        if ( !id ) { throw new Error('no id for lookup field ' + this._name + ' ' + this._idField.getName()); }

        const cond = sql_Filter.create()
            .setField(this._referencedIdField)
            .setOp(sql_Filter.Op.eq)
            .setCompareTo(id);
        const query = sql_Query.select()
            .setFields([ sql_Aggregate.max(this._aggregatedField) ])
            .from(this._aggregatedField.getTable())
            .where(cond);

        return this._entitySetModel.getDb().fetchRow(query).then( ( row ) => {
            return row[this._aggregatedField.getName()];
        });
    });
};

MaxField.prototype.updateReferences = function() {
    this.setIdField(this._table.getField(this._idField.getName()));
};
