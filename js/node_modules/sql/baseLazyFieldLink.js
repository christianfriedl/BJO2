/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * A LazyFieldLink is a prototype of a fieldLink, that will only create the actual link when its apply() is called
 * - so we can create fieldLinks before we actually have all the fields
 * - this is the lazy variant for creating a m_sql_fieldLink.fieldLink
 * 
 * BaseLazyFieldLink is an abstract class and should not be instantiated on its own
 */

"use strict";

var m_sql_table = require('sql/table.js');
var m_bjoo = require('BJOObject.js');
var m_util = require('util.js');

function BaseLazyFieldLink(/* m_sql_table.Table */ table, /* string */ fieldName) {
    m_bjoo.BJOObject.call(this);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT */ 
        if ( arguments.length !== 2 ) { throw new Error('illegal argument length ' + arguments.length); }
            if ( !(table instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: table should be of class m_sql_table.Table: ' + table); }
            if ( !( m_util.isString(fieldName) ) ) { throw new Error('typecheck failed on fieldName: ' + fieldName + ', must be string'); }
        /* @DEVELOMPENT } */

        this._table = table;
        this._fieldName = fieldName;
    } 
}

function baseLazyFieldLink(/* m_sql_table.Table */ table, /* string */ fieldName) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT */ 
        if ( arguments.length !== 2 ) { throw new Error('illegal argument length ' + arguments.length); }
            if ( !(table instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: table should be of class m_sql_table.Table: ' + table); }
            if ( !( util.isString(fieldName) ) ) { throw new Error('typecheck failed on fieldName: ' + fieldName + ', must be string'); }
        /* @DEVELOMPENT } */

        return new BaseLazyFieldLink(table, fieldName);
    }  else {
        return new BaseLazyFieldLink();
    }
}

BaseLazyFieldLink.prototype = new m_bjoo.BJOObject();
BaseLazyFieldLink.prototype.constructor = BaseLazyFieldLink;

//======================================

/**
 * getter
 */
BaseLazyFieldLink.prototype.table = function() {
    return this._table;
}

/**
 * getter
 */
BaseLazyFieldLink.prototype.fieldName = function() {
    return this._fieldName;
}

BaseLazyFieldLink.prototype.apply = function() {
    throw new Error('BaseLazyFieldLink::apply() is abstract');
}

exports.BaseLazyFieldLink = BaseLazyFieldLink;
exports.baseLazyFieldLink = baseLazyFieldLink;
