/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('underscore');
var m_bjoo = require('BJOObject.js');
var m_sql_table = require('sql/table.js');
var m_sql_field = require('sql/field.js');

/*
 * an orderby is a list of fields plus their respective ASC/DESC attributes
 */

var Direction = { asc: 'asc', desc: 'desc' };

/**
 * fetch Direction by its name
 */
function directionByName(name) {
    if ( typeof(name) === 'undefined' ) {
        return Direction.asc;
    }
    return _(_(Direction).keys()).find(function(k) { return Direction[k] === name; });
}

function Field(/*m_sql_field.Field */ field, /* Direction */ direction) {
    m_bjoo.BJOObject.apply(this);
    this._className = 'sql.orderBy.field';

    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 2 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 2); }
            if ( !(field instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: field should be of class m_sql_field.Field: ' + field); }
        /* @DEVELOMPENT } */

        this._field = field;
        this._direction = direction;
    }
}

function field(/*m_sql_field.Field */ field, /* Direction */ direction) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 2 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 2); }
            if ( !(field instanceof m_sql_field.Field) ) { throw new Error('Typecheck failure: field should be of class m_sql_field.Field: ' + field); }
        /* @DEVELOMPENT } */

        return new Field(field, direction);
    } else {
        return new Field();
    }
}

Field.prototype = new m_bjoo.BJOObject();
Field.prototype.constructor = Field;

/**
 * yes, Field has a field!, since it also has a direction
 */
Field.prototype.field = function(/* [m_sql_field.Field] */ field) {
    if ( typeof(field) !== 'undefined' ) {
        this._field = field;
        return this;
    }
    return this._field;
};

Field.prototype.direction = function(/* [Direction] */ direction) {
    if ( typeof(direction) !== 'undefined' ) {
        this._direction = direction;
        return this;
    }
    return this._direction;
};



/**
 * we accept as argument an array of m_sql_orderBy.Field, NOT m_sql.Field!!!
 */
function OrderBy(/* optional Array(Field) */ fields) {
    m_bjoo.BJOObject.apply(this);
    this._className = 'sql.OrderBy';
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
            if ( !(fields instanceof Array) ) { throw new Error('Typecheck failure: fields should be of class Array: ' + fields); }
        /* @DEVELOMPENT } */

        this._fields = fields;
    } else {
        this._fields = [];
    }
}

function orderBy(/* optional Array(Field) */ fields) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
            if ( !(fields instanceof Array) ) { throw new Error('Typecheck failure: fields should be of class Array: ' + fields); }
        /* @DEVELOMPENT } */

        return new OrderBy(fields);
    } else {
        return new OrderBy();
    }
}

OrderBy.prototype = new m_bjoo.BJOObject();
OrderBy.prototype.constructor = OrderBy;

OrderBy.prototype.fields = function() {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 0 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 0); }
    /* @DEVELOMPENT } */

    return this._fields;
};
OrderBy.prototype.addField = function(/* m_sql_orderBy.Field */ field) {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 1 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
        if ( !(field instanceof Field) ) { throw new Error('Typecheck failure: fields should be of class m_sql_orderBy.Field: ' + field); }
    /* @DEVELOMPENT } */

    this._fields.push(field);
};

function orderByFromWeb(/* m_sql_table.Table */ table, /* Array */ webOB) {
    /* @DEVELOPMENT { */
        if ( arguments.length !== 2 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 1); }
        if ( !(table instanceof m_sql_table.Table) ) { throw new Error('Typecheck failure: table should be of class m_sql_table.Table: ' + table); }
        if ( !(webOB instanceof Array) ) { throw new Error('Typecheck failure: webOB should be of class Array: ' + webOB); }
    /* @DEVELOMPENT } */
    
    var ob = orderBy();
    _(webOB).each(function(w) { ob.addField(field(table.field(w.field), directionByName(w.direction))); });
    return ob;
}


exports.Field = Field;
exports.field = field;
exports.OrderBy = OrderBy;
exports.orderBy = orderBy;
exports.orderByFromWeb = orderByFromWeb;
exports.Direction = Direction;
exports.directionByName = directionByName;
