/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var _ = require('underscore');
var m_bjoo = require('BJOObject.js');
var util = require('util.js');
var m_sql_field = require('sql/field.js');

var Op = { eq: 'eq', gt: 'gt', lt: 'lt', gte: 'gte', lte: 'lte', ne: 'ne', like: 'like' };

/**
 * @param {m_sql_field.Field} field
 * @param {Op} op
 * @param {any} compareTo
 */
function Filter(field, op, compareTo) {
    m_bjoo.BJOObject.call(this);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */ 
            if ( arguments.length !== 3 ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + 3); }
            if ( !(field instanceof m_sql_field.Field) ) { throw new Error('typecheck failed on field'); }
            if ( !(util.isString(op)) ) { throw new Error('typecheck failed on op'); }
        /* @DEVELOMPENT } */
        // cannot check compareTo, can be anything
        this._field = field;
        this._op = op;
        this._compareTo = compareTo;
    }
}

Filter.prototype = new m_bjoo.BJOObject();
Filter.prototype.constructor = Filter;

Filter.prototype.field = function(field) {
    if ( typeof(field) !== 'undefined' ) {
        this._field = field;
        return this;
    }
    return this._field;
};

Filter.prototype.op = function(op) {
    if ( typeof(op) !== 'undefined' ) {
        this._op = op;
        return this;
    }
    return this._op;
};

/**
 * @param compareTo field or value
 */
Filter.prototype.compareTo = function(compareTo) {
    if ( typeof(compareTo) !== 'undefined' ) {
        this._compareTo = compareTo;
        return this;
    }
    return this._compareTo;
};

Filter.prototype.compareToValue = function() {
    if ( this._compareTo instanceof m_sql_field.Field ) {
        return this._compareTo.value();
    } else {
        return this._compareTo;
    }
};

function filter(field, op, compareTo) { if ( arguments.length > 0 ) { return new Filter(field, op, compareTo); } else { return new Filter(); } }

function opFromName(name) { return _(Op).invert()[name]; }
function opNames() { return _(Op).keys(); }

function filtersFromWeb(table, requestFilters) {
    if ( typeof(requestFilters) === 'undefined' || requestFilters === null ) {
        return [];
    }
    return _(requestFilters).map(function(c) {
        return filter(table.field(c.fieldName), opFromName(c.opName), c.value);
    });
}


exports.filter = filter;
exports.Op = Op;
exports.opFromName = opFromName;
exports.opNames = opNames;
exports.filtersFromWeb = filtersFromWeb;
