"use strict";

const EventEmitter = require('events');
const util = require('util');
const jQuery = require('jquery');
const _ = require('lodash');
const web_client_FieldModel = require('web/client/FieldModel.js');
const sgui_model_BasicModel = require('SteerGlanceUI/js/node_modules/model/BasicModel.js');

function TableModel(url) {
    this._url = url;
    this._fetchRows(0, this._limit);
}

function create(url) {
    return new TableModel(url);
}

TableModel.prototype = {};
TableModel.prototype.constructor = TableModel;
util.inherits(TableModel, EventEmitter);

TableModel.prototype._url = null;
TableModel.prototype._headerRows = [];
TableModel.prototype._rows = [];
TableModel.prototype._limit = 10;
TableModel.prototype._offset = 0;

exports.TableModel = TableModel;
exports.create = create;

TableModel.prototype.getBodyRows = TableModel.prototype.getRows = TableModel.prototype.getBody = function() {
    return this._rows;
};

TableModel.prototype._fetchRows = function(offset, limit) {
    const self = this;
    const dataObject = {
        conditions: {
            limit: limit,
            offset: offset,
        }
    };
    jQuery.ajax(this._url, {
        method: 'GET',
        async: true,
        dataType: 'json',
        data: dataObject,
        contentType: 'application/json',
        success: function(response) {
            let rowIndex = offset;
            _.each(response.rows, ( row ) => {
                if ( rowIndex === offset ) { // first row, let's set the header
                    self._headerRows = [ 
                        _.map(row.fields, ( field ) => {
                            return sgui_model_BasicModel.basicModel(field.label);
                        })
                    ];
                }
                const modelRow = _.map(row.fields, ( field ) => {
                    return web_client_FieldModel.fromField(field);
                });
                if ( self._rows[rowIndex] !== undefined ) {
                    self._rows[rowIndex] = modelRow;
                    self.emit('changeRow', modelRow, rowIndex);
                } else {
                    self._rows.push(modelRow);
                    self.emit('addRow', modelRow, rowIndex);
                }
                ++rowIndex;
            });
            self.emit('change', self._rows);
            self.emit('changeHeader', self._headerRows);
        }, error: function() {
            console.log('error', arguments);
        }
    });
};

TableModel.prototype.getHeaderRows = TableModel.prototype.getHeader = function() {
    return this._headerRows;
};
TableModel.prototype.getFooterRows = TableModel.prototype.getFooter = function() {
    return [];
};
