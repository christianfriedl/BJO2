/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

// deps are in an object, so DI can replace these
const deps = { 
    _: require('lodash'),
    bjoo: require('BJOObject'),
    http: require('http'), 
    anyBody: require('body/any'),
    jsonBody: require('body/json'),
    router: require('web/server/router.js'),
};


/**
 * @class web.server.Server
 * @constructor
 * @param {Object} config
 */
function Server(config) {
    deps.bjoo.BJOObject.call(this);
    if ( arguments.length > 0 ) {
        this._config = config;
    }
}

function create(config) {
    return new Server(config);
}

Server.prototype = deps.bjoo.create();
exports.Server = Server;
exports.create = create;
exports.deps = deps;

Server.prototype.run = function() {
    deps.http.createServer((request, response) => {
        if (request.url === '/favicon.ico') return; /////// i don't want this in the log for now (TODO remove it)
        if ( request.method === 'POST' ) {
            deps.jsonBody(request, response, (err, body) => {
                if ( err ) {
                    throw err;
                }
                request.body = body;
                this._handleRequest(request, response);
            });
        } else {
            this._handleRequest(request, response);
        }

    }).listen(this._config.web.server.port);
};

Server.prototype._handleRequest = function(request, response) {
    const routeDesc = deps.router.route(request.url);
    this._serveRequest(request, routeDesc, response, this.responseCallback);
    // TODO report exception/ route error to client somehow...
};

Server.prototype._serveRequest = function(origRequest, routeDesc, httpResponse, responseCallback) {
    const internalRequest = { 
        moduleName: routeDesc.moduleName, controllerName: routeDesc.controllerName, actionName: routeDesc.actionName, 
        url: origRequest.url, query: routeDesc.query,
        body: origRequest.body
    };

    const internalResponse = { 
        returnCode: 200, 
        contentType: 'text/html', 
        text: null, 
    };

    const actionMethod = this._getActionMethod(routeDesc);
    actionMethod(internalRequest, internalResponse).then((internalResponse) => {
        httpResponse.writeHead(internalResponse.returnCode, {'Content-Type': internalResponse.contentType});
        httpResponse.write(internalResponse.text);
        httpResponse.end();
    });
};

Server.prototype._getActionMethod = function(routeDesc) {
    // TODO can we find a more generic way to find the controller?
    const controllerFileName = this._getControllerFileName(routeDesc.controllerName);
    const controllerModule = require(deps._.find([ 'app/web/server', 'web/server/controller' ], ( dir ) => {
        const controllerPath = dir + '/' + controllerFileName;
        try {
            const controllerModule = require(controllerPath);
            return controllerModule;
        } catch (e) {
            if ( !e.message.match(/^Cannot find module/) ) {
                throw e;
            }
            return undefined;
        }
    }) + '/' + controllerFileName);

    if ( !controllerModule ) {
        throw new Error('controller file ' + controllerFileName + 'not found');
    }

    const controllerObject = controllerModule.create(this._config);
    const method = controllerObject[this._getActionMethodName(routeDesc.actionName)];
    
    if ( method === undefined ) {
        throw new Error('method not found: ' + routeDesc.actionName + ' in controller ' + routeDesc.controllerName);
    }

    return method;
};

Server.prototype._getControllerFileName = function(controllerName) {
    return this._getControllerClassName(controllerName) + '.js';
};

Server.prototype._getControllerClassName = function(controllerName) {
    return deps._.capitalize(controllerName) + 'Controller';
};

Server.prototype._getActionMethodName = function(actionName) {
    return actionName + 'Action';
};
