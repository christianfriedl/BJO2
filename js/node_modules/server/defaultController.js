/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var async = require('async');
var _ = require('underscore');
var m_sql_conditionSet = require('sql/conditionSet.js');

function prepare(boSet, request, response, responseCallback) {
    response.data = { };
    switch(request.query.form) { // TODO extract this to a factory-like thingie
        case 'list':
            var data = { form: 'list',
                templateRow: {fields: boSet.templateBo().fieldsWebized() }
            };
            response.data = data;
            break;
    }
    return responseCallback(response);
}

function edit(bo, request, response, responseCallback) {
    bo.loadById(request.query.id, function(err) {
        // if ( err ) return responseCallback(err); TODO
        var data = { 
            row: {fields: bo.fieldsWebized(), id: bo.id() }
        };
        response = _(response).extend({
            action: 'edit', 
            form: 'edit',
            data: data
        });
        responseCallback(response);
    });
}

function list(boSet, request, response, responseCallback) {
    var reqConds = [];
    if ( typeof(request.body) !== 'undefined' ) {
        reqConds = request.body.conditions;
    }
    var conditions = m_sql_conditionSet.conditionSetFromWeb(boSet.daoSet().table(), reqConds);
    async.waterfall([
        function(callback) {
            boSet.willCalculateDetailCalcFields(true);
            boSet.willCalculateAggregatedCalcFields(true);
            boSet.loadAllByConditions(conditions, function(err, bos, aggregateBo) {
                if (err) { return callback(err); }
                callback(false, bos, aggregateBo);
            }.bind(this));
        }.bind(this),
        function(bos, aggregateBo, callback) {
            boSet.countByConditions(conditions, function(err, count) {
                // if ( err ) return responseCallback(err); TODO
                response = _(response).extend({
                    action: 'list', 
                    form: 'list',
                    data: {
                        rows: _(bos).map(function(bo) { return {fields: bo.fieldsWebized(), id: bo.id() }; }),
                        aggregateRow: { fields: aggregateBo.fieldsWebized() }, // all fields, so we can determine where each one goes
                        count: count,
                        templateRow: {fields: boSet.templateBo().fieldsWebized() }
                    }
                });
                callback(false, response);
            }.bind(this));
        }.bind(this)
    ], function(err, response) {
        if ( err ) { console.error(err); /* TODO report error to client */ }
        return responseCallback(response);
    });
}

function saveRow(bo, request, response, responseCallback) { 
    _(bo.writableFieldsAsList()).each(function(f) { 
        var value = request.body[f.name()];
        if ( typeof(value) !== 'undefined' && value.length > 0 ) {
            f.value(value); 
        }
    });
    bo.save(function(err, res) {
        response.data = { id: bo.id() };
        responseCallback(response);
    });
}

/*
 * NOTE: this will only ever work on primaryBos
 * request.body (i.e., POST) needs:
 * { fieldName: <...>,
 *      row { id: <..>, <fieldName>: <value>, ... } }
 */
function saveField(bo, request, response, responseCallback) {
    if ( typeof(request.body.row.id) !== 'undefined' && request.body.row.id.length > 0 ) {
        bo.loadById(request.body.row.id, function(err) {
            if ( err ) throw err;
            bo.saveField(request.body.fieldName, request.body.row, function(err, bo2, flags) { // NOTE: alternate callback sig for additional return info!
                if ( err ) throw err;
                response.data = { row: { fields: bo.fieldsWebized(), id: bo.id() }, flags: flags };
                responseCallback(response);
            });
        }, false);
    } else {
        bo.saveField(request.body.fieldName, request.body.row, function(err, bo2, flags) { // NOTE: alternate callback sig for additional return info!
            if ( err ) throw err;
            response.data = { row: { fields: bo.fieldsWebized(), id: bo.id() }, flags: flags };
            responseCallback(response);
        });
    }
}

function count(boSet, request, response, responseCallback) {
    var reqConds = [];
    if ( typeof(request.body) !== 'undefined' ) {
        reqConds = request.body.conditions;
    }
    var conditions = m_sql_conditionSet.conditionSetFromWeb(boSet.daoSet().table(), reqConds);
    boSet.countByConditions(conditions, function(err, count) {
        if ( err ) throw err;
        var templateRow = {fields: boSet.templateBo().fieldsWebized() };
        response.data = { count: count, templateRow: templateRow };
        responseCallback(response);
    });
}

function aggregateRow(bo, request, response, responseCallback) {
    bo.calculateCalcFields([], function(err) {
        if ( err ) throw err;
        response.data = { row: { fields: bo.fieldsWebized() } };
        responseCallback(response);
    });
}

function templateRow(boSet, request, response, responseCallback) {
    response.data = {fields: boSet.templateBo().fieldsWebized() };
    responseCallback(response);
}

exports.prepare = prepare;
exports.edit = edit;
exports.list = list;
exports.saveField = saveField;
exports.saveRow = saveRow;
exports.count = count;
exports.templateRow = templateRow;
