var _ = require('underscore');

function edit(bo, request, response, responseCallback) {
    console.log('edit req', request);
    bo.loadById(request.query.id, function(err) {
        // if ( err ) return responseCallback(err); TODO
        var data = { action: 'edit', 
            row: bo.fieldsWebized()
        };
        console.log('### data', data);
        response.data = data;
        responseCallback(response);
    });
}

function list(bo, request, response, responseCallback) {
    console.log('list req', request);
    // TODO actually process conditions
    bo.loadAllByConditions([], function(err, bos, aggregateBo) {
        // if ( err ) return responseCallback(err); TODO
        var data = { action: 'list', 
            rows: _(bos).map(function(bo) { return {fields: bo.fieldsWebized(), id: bo.id() }; }),
            aggregateRow: aggregateBo.fieldsWebized() // all fields, so we can determine where each one goes
        };
        response.data = data;
        responseCallback(response);
    }.bind(this), true);
}

function saveRow(bo, request, response, responseCallback) { 
    _(bo.writableFieldsAsList()).each(function(f) { 
        var value = request.body[f.name()];
        if ( typeof(value) !== 'undefined' && value.length > 0 ) {
            f.value(value); 
        }
    });
    bo.save(function(err, res) {
        response.data = { id: bo.id() };
        responseCallback(response);
    });
}

/*
 * NOTE: this will only ever work on primaryBos
 */
function saveField(bo, request, response, responseCallback) {
    console.log('saveField', 'row', request.body.row);
    if ( typeof(request.body.row.id) !== 'undefined' && request.body.row.id.length > 0 ) {
        bo.loadById(request.body.row.id, function(err) {
            if ( err ) throw err;
            bo.saveField(request.body.fieldName, request.body.row, function(err, bo2, hasSaved) { // NOTE: alternate callback sig for additional return info!
                if ( err ) throw err;
                afterSaveCallback(bo, response, hasSaved);
            });
        }, false);
    } else {
        bo.saveField(request.body.fieldName, request.body.row, function(err, bo2, hasSaved) { // NOTE: alternate callback sig for additional return info!
            if ( err ) throw err;
            afterSaveCallback(bo, response, hasSaved);
        });
    }

    function afterSaveCallback(bo, response, hasSaved) {
        bo.calculateCalcFields([], function(err) {
            if ( err ) throw err;
            response.data = { row: bo.fieldsWebized(), hasSaved: hasSaved };
            responseCallback(response);
        });
    }
}

exports.edit = edit;
exports.list = list;
exports.saveField = saveField;
exports.saveRow = saveRow;
