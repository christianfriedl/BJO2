var _ = require('underscore');

function edit(bo, request, response, responseCallback) {
    console.log('edit req', request);
    bo.loadById(request.query.id, function(err) {
        // if ( err ) return responseCallback(err); TODO
        var data = { action: 'edit', 
            row: bo.fieldsWebized()
        };
        console.log('### data', data);
        response.data = data;
        responseCallback(response);
    });
}

function list(bo, request, response, responseCallback) {
    console.log('list req', request);
    // TODO actually process conditions
    bo.loadAllByConditions([], function(err, bos, aggregateBo) {
        // if ( err ) return responseCallback(err); TODO
        var data = { action: 'list', 
            rows: _(bos).map(function(bo) { return {row: bo.fieldsWebized() }; }),
            aggregateRow: aggregateBo.fieldsWebized() // all fields, so we can determine where each one goes
        };
        response.data = data;
        responseCallback(response);
    }.bind(this), true);
}

function save(bo, request, response, responseCallback) {
    bo.firstName(request.body.firstName);
    bo.lastName(request.body.lastName);
    if ( typeof(request.body.id) !== 'undefined' ) {
        bo.id(request.body.id);
    }
    bo.save(function(err, res) {
        response.data = { id: bo.id() };
        responseCallback(response);
    });
}

exports.edit = edit;
exports.list = list;
exports.save = save;
