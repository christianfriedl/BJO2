var sq = require('server/sql/query.js');
var condition = require('server/sql/condition.js');
var _ = require('underscore');

function queryString(serverQuery) {
    switch ( serverQuery.type() ) {
        case sq.Type.select:
            return _selectQueryString(serverQuery);
            break;
        default:
            throw 'no such query type';
            break;
    }
}

function _selectQueryString(serverQuery) {
    var sql = 'SELECT ';
    var ff = serverQuery.fields();
    if ( serverQuery.aggregate() !== null ) {
        switch ( serverQuery.aggregate() ) {
            case sq.Aggregate.sum:
                var ffMap = _.map(ff, function(f) { return 'SUM(' + f.name() + ')'; });
                sql += ffMap.join(', ') + ' ';
                break;
            case sq.Aggregate.count:
                sql += 'COUNT(*) ';
                break;
            default:
                throw 'no such aggregate: ' + serverQuery.aggregate();
        }
    } else {
        var ffMap = _.map(ff, function(f) { return f.name(); });
        sql += ffMap.join(', ');
    }
    sql += ' FROM ';
    sql += _.map(serverQuery.tables(), function(t) { return t.name(); }).join(', ');
    sql += ' ';
    sql += _whereClause(serverQuery);
    return sql;
}

function _fieldRefOrValue(fieldOrValue) {
    if ( typeof(fieldOrValue.className()) !== 'undefined' && fieldOrValue.className() === 'sql.Field' ) {
        return fieldOrValue.name();
    } else {
        return fieldOrValue;
    }
}

function _whereClause(serverQuery) {
    var sql = 'WHERE ';
    sql += _.map(
        serverQuery.conditions(), function(c) { 
            return c.field().name() + ' ' + _opString(c.op()) + ' ' + _fieldRefOrValue(c.compareTo()); 
        }).join(' AND ');
    return sql;
}

function _opString(op) {
    switch ( op ) {
        case condition.Op.eq:
            return '=';
        default:
            throw 'TODO implement _opString!!!';
    }
}

exports.queryString = queryString;
