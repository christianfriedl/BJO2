/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

const async = require('async');
const _ = require('lodash');
const q = require('q');
const sql_ConditionSet = require('sql/ConditionSet.js');

function edit(entitySet, request, response) {
    return entitySet.loadEntityById(request.query.id).then((entity) => {
        return entity.toJson().then((row) => {
            return _.merge(response, {
                action: 'edit', 
                id: row.id,
                row: row
            });
        });
    });
}

function list(entitySet, request, response, responseCallback) {
    var reqConds = [];
    if ( typeof(request.body) !== 'undefined' ) {
        reqConds = request.body.conditions;
    }
    var conditions = []; // TODO sql_ConditionSet.createFromWeb(entitySet.getTable(), reqConds);
    return entitySet.findAllEntities().then((entities) => { // TODO, not ALL
        return q.all(_.map(entities, (entity) => { return entity.toJson(); }))
    }).then((rows) => {
        return _.merge(response, {
            action: 'list',
            rows: rows
        });
    });
    // TODO fetch counts, other aggregates?
}

function saveField(entitySet, request, response) {
    if ( request.body.id !== undefined ) { // we have an id, update the entity
        return entitySet.loadEntityById(request.body.id).then((entity) => {
            entity.getField(request.body.field.name).setValue(request.body.field.value);
            return entity.save().then(() => { return entity; });
        }).then((entity) => {
            return entity.toJson();
        }).then((row) => {
            return _.merge(response, { row: row, id: row.id, performedAction: 'updated' });
        }).catch((err) => {
            return _.merge(response, { performedAction: null, state: 'error', errors: [ err.message ] });
        });
    } else { // insert
        const entity = entitySet.createEntity();
        const row = request.body.row;
        _.each(row, ( field ) => {
            entity.getField(field.name).setValue(field.value); // TODO make convenience method in Entity for that
        });
        return entity.save()
            .then(() => { return entity.toJson(); })
            .then((row) => {
                return _.merge(response, { row: row, id: row.id, performedAction: 'inserted' });
            }).catch((err) => {
                return _.merge(response, { performedAction: null, state: 'error', errors: [ err.message ] });
            });
    }
}

function count(boSet, request, response, responseCallback) {
    var reqConds = [];
    if ( typeof(request.body) !== 'undefined' ) {
        reqConds = request.body.conditions;
    }
    var conditions = sql_ConditionSet.conditionSetFromWeb(boSet.daoSet().table(), reqConds);
    boSet.countByConditions(conditions, function(err, count) {
        if ( err ) throw err;
        var templateRow = {fields: boSet.templateBo().fieldsToJson() };
        response.data = { count: count, templateRow: templateRow };
        responseCallback(response);
    });
}

function aggregateRow(bo, request, response, responseCallback) {
    bo.calculateCalcFields([], function(err) {
        if ( err ) throw err;
        response.data = { row: { fields: bo.fieldsToJson() } };
        responseCallback(response);
    });
}

function templateRow(boSet, request, response, responseCallback) {
    response.data = {fields: boSet.templateBo().fieldsToJson() };
    responseCallback(response);
}

exports.edit = edit;
exports.list = list;
exports.saveField = saveField;
exports.count = count;
exports.templateRow = templateRow;
