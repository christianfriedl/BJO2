/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var http = require('http');
var util = require('util');
var anyBody = require('body/any');
var jsonBody = require('body/json');

function start() {
    var log4js = require('log4js');
    log4js.configure({ appenders: [ { type: "console", layout: { type: "basic" } } ], replaceConsole: true })

    var fs = require('fs');
    var m_db = require('sql/db.js');
    http.createServer(function(request, response) {
        if (response.url === '/favicon.ico') return; /////// i don't want this in the log for now (TODO remove it)
        if ( request.method === 'POST' ) {
            jsonBody(request, response, function (err, body) {
                util.log('http server req body', body);
                if ( err ) {
                    throw err;
                }
                request.body = body;
                handle(request, response);
            });
        } else {
            handle(request, response);
        }

        function handle(request, response) {
            var db1 = m_db.db('test.db').open('test.db');
            console.log('http request', request.url);
            var router = require('./router.js');
            router.route(request, function(err, moduleName, controllerName, actionName, query) {
                console.log('routed: ' + request.url, 'to', err, moduleName, controllerName, actionName, query);

                var internalRequest = { 
                    db: db1, 
                    moduleName: moduleName, controllerName: controllerName, actionName: actionName, 
                    orig: request, url: request.url, query: query,
                    body: request.body
                };

                if ( err ) {
                    moduleName = 'error';
                    controllerName = 'error';
                    actionName = 'errorWithText';
                    internalRequest.text = 'error: ' + err.toString();
                }

                var controllerFileName = './app/' + moduleName + '/' + controllerName + '.js';
                var controller = require(controllerFileName);
                if ( !controller ) {
                    throw 'controller file ' + controllerFileName + 'not found';
                }

                var method = controller[actionName];
                
                if ( typeof(method) === 'undefined' ) {
                    console.log('con', controller);
                    console.log('method not found for action', actionName, 'in controller', controllerFileName);
                    throw 'method not found';
                }

                var internalResponse = { 
                    request: internalRequest, 
                    returnCode: 200, 
                    contentType: 'text/html', 
                    text: null, 
                    orig: response 
                };

                method(internalRequest, internalResponse, responseCallback);
            });
        }
    }).listen(8888);
}

function responseCallback(response) {
    response.request.db.close();
    response.orig.writeHead(response.returnCode, {"Content-Type": response.contentType});
    if ( response.text === null ) { // TODO arg this is a hack
        var data = response.data; // TODO this should really be cloned...
        data.module = response.request.moduleName;
        data.controller = response.request.controllerName;
        data.action = response.request.actionName;
        response.text = JSON.stringify(data);
    }
    response.orig.write(response.text);
    response.orig.end();

}

exports.start = start;
