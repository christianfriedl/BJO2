/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * an Entity is an object that is fit for its corresponding entry in the database
 * ... apart from that, nothing is known about the entity, so for saving it, we shall 
 * have to use all primary key fields
 *
 * TODO: filename is lowercase now, and damn windoze!!
 */

"use strict";

const _ = require('lodash');
const q = require('q');
const bjoo = require('BJOObject.js');
const model_EntityModel = require('model/EntityModel.js');

function Entity() {
    bjoo.BJOObject.call(this);
}

function create(/* model_EntityModel.Entity */ model) {
    console.log('create/frommodel called with model', model);
    const entity = new Entity();
    if ( arguments.length > 0 ) {
        /* @DEVELOMPENT { */
            if ( !(model instanceof model_EntityModel.EntityModel) ) { throw new Error('model must be of type model_EntityModel.EntityModel:' + model); }
        /* @DEVELOMPENT } */
        entity.setModel(model);
    }
    return entity;
}

Entity.prototype = bjoo.create();
Entity.prototype.constructor = Entity;

Entity.prototype.setModel = function(/* model_EntityModel.Entity */ model) {
    /* @DEVELOMPENT { */
        /* TODO: for testing, we could create an "interface" an then derive a mock object from that */
        // if ( !(model instanceof model_EntityModel.IEntityModel) ) { throw new Error('model must be of type model_EntityModel.IEntityModel'); }
        if ( this._model ) {
            console.warn('this._model is already set in Entity.setModel, some attributes might remain');
        }
    /* @DEVELOMPENT } */
    this._model = model;
    _.each(model.getAttributeNames(), ( name ) => {
        this._createAccessors(name);
    });
};

Entity.prototype._createAccessors = function(/* string */ key) {
    this['get' + key.substr(0, 1).toUpperCase() +  key.substr(1)] = function() { return this._model.getAttributeValue(key); }.bind(this);
    this['set' + key.substr(0, 1).toUpperCase() +  key.substr(1)] = function(val) { this._model.setAttributeValue(key, val); return this; }.bind(this);
};

/* Promise */ Entity.prototype.save = function() {
    return this._model.save();
};

/* Promise */ Entity.prototype.delete = function() {
    return this._model.delete();
};

/* Promise(Object) */ Entity.prototype.getValuesAsObject = Entity.prototype.get = function(/* optional Array(String) */ names) {
    if ( names === undefined ) {
        names = this._model.getAttributeNames();
    }

    let promisedObj = {};
    return q.all(_.map(names, ( name ) => {
        return this._model.getAttributeValue(name).then( ( value ) => {
            promisedObj[name] = value;
        });
    })).then( () => {
        return promisedObj;
    });
};

Entity.prototype.getField = function(name) {
    return this._model.getAttribute(name);
};

Entity.prototype.isValid = function() {
    return this._model.isValid();
};

/*Promise*/ Entity.prototype.validate = function() {
    return this._model.validate();
};

Entity.prototype.setValidation = function(/* function(ctx) */ validation) {
    this._validation = validation;
};

Entity.prototype.toJson = Entity.prototype.getValuesAsObject; // HMM...

exports.Entity = Entity;
exports.create = create;
