/*
 * Copyright (C) 2015-2017 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * an EntitySet is an object that is fit for its corresponding entry in the database
 * ... apart from that, nothing is known about the entity, so for saving it, we shall 
 * have to use all primary key fields
 *
 * TODO: filename is lowercase now, and damn windoze!!
 */

"use strict";

const _ = require('lodash');
const q = require('q');
const BJOObject = require('BJOObject.js');
const model_EntityModel = require('model/EntityModel.js');
const model_EntitySetModel = require('model/EntitySetModel.js');

/**
 * Base class for sets of entities
 *
 * @namespace entity
 * @module entity
 * @class EntitySet
 * @constructor
 */
function EntitySet() {
    BJOObject.BJOObject.call(this);
}

/**
 * external constructor
 *
 * @function create
 * @static
 * @param {model.EntitySetModel} model
 * @param {function(EntityModel)} entityConstructor the external constructor function for the entity
 * @return entity.EntitySet
 */
function create(/* model_EntitySetModel.EntitySetModel */ model, /* function(EntityModel) */ entityConstructor) {
    const set = new EntitySet();
    if ( arguments.length > 0 ) {
        /* @DEVELOMPENT { */
            if ( !(model instanceof model_EntitySetModel.EntitySetModel) ) { throw new Error('model must be of type model_EntitySetModel.EntitySetModel'); }
            if ( !(_.isFunction(entityConstructor)) ) { throw new Error('entityConstructor must be a function, but is: "' + entityConstructor + '"'); }
        /* @DEVELOMPENT } */
        set.setModel(model);
        set.setEntityConstructor(entityConstructor);
    }
    return set;
}

EntitySet.prototype = BJOObject.create();
EntitySet.prototype.constructor = EntitySet;
EntitySet.prototype._model = null;
EntitySet.prototype._entityConstructor = null;

exports.EntitySet = EntitySet;
exports.create = create;

/**
 * @method getModel
 */
EntitySet.prototype.getModel = function() {
    return this._model;
};

/**
 * @param {model.EntitySetModel} model
 */
EntitySet.prototype.setModel = function(model) {
    /* @DEVELOMPENT { */
        if ( !(model instanceof model_EntitySetModel.EntitySetModel) ) { throw new Error('model must be of type model_EntitySetModel.EntitySetModel'); }
    /* @DEVELOMPENT } */
    this._model = model;
};

/**
 * convenience function to get the table from the model
 *
 * @method getTable
 */
EntitySet.prototype.getTable = function() {
    return this._model.getTable();
};

/**
 * @method setEntityConstructor
 * @param {Function(model.EntityModel)} entityConstructor external contstructor function for the entity
 */
EntitySet.prototype.setEntityConstructor = function(/* function(EntityModel) */ entityConstructor) {
    this._entityConstructor = entityConstructor;
};

/**
 * load the entity by its primary key id
 * @method loadEntityById
 * @param {int} id
 * @return {Promise}
 * @async
 */
EntitySet.prototype.loadEntityById = function(/* int */ id) { 
    return this._model.loadEntityById(id).then( ( em ) => {
        return q(this._entityConstructor(em));
    }); 
};
/**
 * load the entity by its primary key id - or null if not exists
 * @method loadEntityById
 * @param {int} id
 * @return {Promise}
 * @async
 */
EntitySet.prototype.findEntityById = function(/* int */ id) { 
    return this._model.findEntityById(id).then( ( em ) => {
        if ( em ) {
            return q(this._entityConstructor(em));
        } else {
            return q(null);
        }
    }); 
};
/**
 * find all entities for this set
 * @method findAllEntities
 * @return {Promise(Array)}
 * @async
 */
EntitySet.prototype.findAllEntities = function() { 
    return this._model.findAllEntities().then( ( ems ) => {
        return _.map(ems, ( em ) => {
            return this._entityConstructor(em);
        });
    });
};
/**
 * find entities for this set, pertaining to conditions
 * @method findEntities
 * @param {sql.ConditionSet} conditionSet the search conditions
 * @return {Promise(Array)}
 * @async
 */
EntitySet.prototype.findEntities = function(conditionSet) { 
    return this._model.findEntities(conditionSet).then( ( ems ) => {
        return _.map(ems, ( em ) => {
            return this._entityConstructor(em);
        });
    });
};

/**
 * create an entity from the model
 *
 * (used in default controller to create a new entity for the insert row)
 *
 * @method createEntity
 * @async
 * @return {Promise} the entity
 */
EntitySet.prototype.createEntity = function() {
    const entityModel = this._model.createEntityModel();
    return this._entityConstructor(entityModel);
};
