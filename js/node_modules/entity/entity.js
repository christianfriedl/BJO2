/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of SteerGlance.
 *
 * SteerGlance is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/**
 * an Entity is an object that is fit for its corresponding entry in the database
 * ... apart from that, nothing is known about the entity, so for saving it, we shall 
 * have to use all primary key fields
 *
 * TODO: filename is lowercase now, and damn windoze!!
 *
 * NOTE: right now, that is really just any object...
 */

"use strict";

const _ = require('lodash');
const bjoo = require('BJOObject.js');

function Entity(/* model_EntityModel.EntityModel */ model) {
    if ( arguments.length > 0 ) {
        this._model = model;
        _.each(model.getAttributes(), ( attr ) => {
            this._createAccessors(attr.getName());
        });
    }
}

function create(/* model_EntityModel.Entity */ model) {
    return fromEntityModel(model);
}

function fromEntityModel(/* model_EntityModel.EntityModel */ model) {
    return new Entity(model);
}

function fromObjectModel(/* model_ObjectModel.ObjectModel */ model) {
    throw new Error('not yet implemented');
}


Entity.prototype = bjoo.create();
Entity.prototype.constructor = Entity;

Entity.prototype._createAccessors = function(/* string */ key) {
    this['get' + key.substr(0, 1).toUpperCase() +  key.substr(1)] = function() { return this._model.getAttribute(key).getValue(); }.bind(this);
    this['set' + key.substr(0, 1).toUpperCase() +  key.substr(1)] = function(val) { this._model.getAttribute(key).setValue(val); return this; }.bind(this);
}

/* Promise */ Entity.prototype.save = function() {
    return this._model.save();
};

/* Promise */ Entity.prototype.delete = function() {
    return this._model.delete();
};


exports.Entity = Entity;
exports.create = create;
