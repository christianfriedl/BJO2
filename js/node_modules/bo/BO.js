var _ = require('underscore');
var m_dao = require('dao/dao.js');
var m_bjoo = require('BJOObject.js');

var BO = function(/*sql_db*/p_db, /*dao_dao*/p_dao, /*(optional)bo_bo function()*/p_constructor) {
    m_bjoo.BJOObject.apply(this);
    if ( arguments.length > 0 ) {
        this._className = 'bo.BO';
        this._fields = {};
        if ( typeof(p_dao) !== 'undefined' ) {
            this.dao(p_dao);
        } else {
            this._dao = m_dao.dao(p_db);
        }
        this._constructor = (typeof(p_constructor) !== 'undefined' ? p_constructor : bo);
    }
};

BO.prototype = new m_bjoo.BJOObject();
BO.prototype.constructor = BO;

BO.prototype.dao = function(p_dao) {
    if ( typeof(p_dao) !== 'undefined') {
        this._dao = p_dao;
        this._fieldsFromDao(p_dao);
        this._addAccessors();
        return this;
    }
    return this._dao;
};

BO.prototype.field = function(fieldOrName) {
    if ( typeof(fieldOrName.className) !== 'undefined' && (fieldOrName.className() === 'sql.Field' || fieldOrName.className() === 'sql.CalcField') ) {
        this._fields[fieldOrName.name()] = fieldOrName;
        return this;
    }
    return this._fields[fieldOrName];
};

BO.prototype.fieldValue = function(/*string*/name, /*[object]*/value, /*[bool true]*/validate) {
    if ( typeof(value) !== 'undefined' ) {
        var field = this.field(name);
        if ( typeof(validate) === 'undefined' || validate ) {
            field.validate(value, this);
        }
        field.value(value);
        return this;
    }
    return this._fields[name].value();
};

/* validate will not return a value, but rather throw a ValidationException on error */
BO.prototype.validate = /*void*/function() {
    // if no validation is set, we will assume all is good
    if ( typeof(this._validation) !== 'undefined' ) {
        this._validation.bind(this)(); // ignore return value so user need not return this
    }
    return this;
};

BO.prototype.validation = function(/*function()*/validation) {
	if ( typeof(validation) !== 'undefined' ) {	
	    this._validation = validation;
        return this;
    }
    return this._validation;
};


BO.prototype.addFields = function(fields) {
    _.each(fields, function(f) { this.field(f); }, this);
};

BO.prototype._fieldValuesFromRow = function(row) {
    _.each(_.keys(row), function(n) { this.fieldValue(n, row[n]); }, this);
};

BO.prototype._fieldValuesFromDao = function(dao, withCalcFields) {
    if ( typeof(withCalcFields) === 'undefined' ) {
        withCalcFields = false;
    }
    var fields = undefined;
    if ( withCalcFields ) {
        fields = dao.fieldsAsList();
    } else {
        fields = dao.writableFieldsAsList();
    }
    _(fields).each(function(f) { this.fieldValue(f.name(), f.value()); }, this); // TODO
};

BO.prototype._fieldsFromDao = function() {
    _.map(
        this._dao.fieldsAsList(), 
        function(f) { 
            this.field(f); 
        }.bind(this));
};

BO.prototype.fieldsAsList = function() {
    return _.values(this._fields);
};

BO.prototype.calcFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f.className() === 'sql.CalcField'); }); 
};

BO.prototype._addAccessors = function() {
    // TODO: name must be identifier-compatible!
    _.each(this._fields, function(f) { 
        this[f.accessorName()] = function(val) { 
            if ( arguments.length === 1 && typeof(val) !== 'undefined' ) {
                return this.fieldValue(f.name(), val); 
            } else if ( arguments.length === 0 ) {
                return this.fieldValue(f.name()); 
            }
        }.bind(this); 
    }, this);
    return this;
};

BO.prototype.fieldsWebized = function() {
    return _(this.fieldsAsList()).map(function(f) { return f.webize(); });
};

BO.prototype.calcFieldsWebized = function() {
    return _(this.calcFieldsAsList()).map(function(f) { return f.webize(); });
};

/*
 * query....
 */
BO.prototype.loadAllByConditions = function(conditions, callback, calculateCalcFields) {
    if ( typeof(calculateCalcFields) === 'undefined' ) {
        calculateCalcFields = false;
    }
    var calculateDetailCalcFields = ( typeof(this.loadById) === 'function' );
    this._dao.loadAllByConditions(conditions, function(err, daos, aggregateDao) {
        if (err) return callback(err);
        var bos = _(daos).map(function(dao) { 
            var bo = this._constructor.call({}, this._db, dao); 
            bo._fieldValuesFromDao(dao, calculateDetailCalcFields);
            return bo; 
        }.bind(this));
        
        var aggregateBo = undefined;
        if ( calculateCalcFields ) {
            aggregateBo = this._constructor.call({}, this._db, aggregateDao); 
            aggregateBo._fieldValuesFromDao(aggregateDao, calculateCalcFields);
        }
        callback(false, bos, aggregateBo);
    }.bind(this), calculateDetailCalcFields, calculateCalcFields);

};

BO.prototype.calculateCalcFields = function(conditions, callback) {
    this._dao.calculateCalcFields(conditions, function(err, row) { this._calcFieldValuesFromDao(this._dao); });
    callback(false, this);
}

function bo(p_db, p_dao) { return new BO(p_db, p_dao); }

exports.BO = BO;
exports.bo = bo;
