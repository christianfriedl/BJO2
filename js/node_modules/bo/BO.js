var _ = require('underscore');
var dao = require('dao/dao.js');

var BO = function(dao) {
    this._className = 'bo.BO';
    this._fields = {};
    if ( typeof(dao) !== 'undefined' ) {
        this.dao(dao);
    } else {
        this._dao = new dao.DAO();
    }
};

BO.prototype.dao = function(dao) {
    if ( typeof(dao) !== 'undefined') {
        this._dao = dao;
        this._fieldsFromDao(dao);
        this._addAccessors();
        return this;
    }
    return this._dao;
};

BO.prototype.field = function(fieldOrName) {
    if ( typeof(fieldOrName.className) !== 'undefined' && fieldOrName.className() === 'sql.Field' ) {
        this._fields[fieldOrName.name()] = fieldOrName;
        return this;
    }
    return this._fields[fieldOrName];
};

BO.prototype.fieldValue = function(name, value) {
    if ( typeof(value) !== 'undefined' ) {
        this.field(name).value(value);
        return this;
    }
    return this._fields[name].value();
};

BO.prototype.addFields = function(fields) {
    _.each(fields, function(f) { this.field(f); }, this);
};

BO.prototype._fieldValuesFromRow = function(row) {
    _.each(_.keys(row), function(n) { this.fieldValue(n, row[n]); }, this);
};

BO.prototype._fieldsFromDao = function() {
    _.map(this._dao.table().fields(), function(f) { this.field(f); }.bind(this));
};

BO.prototype._addAccessors = function() {
    // TODO: name must be identifier-compatible!
    _.each(this._fields, function(f) { 
        this[f.accessorName()] = function(val) { 
            if ( arguments.length === 1 && typeof(val) !== 'undefined' ) {
                return this.fieldValue(f.name(), val); 
            } else if ( arguments.length === 0 ) {
                return this.fieldValue(f.name()); 
            }
        }.bind(this); 
    }, this);
    return this;
};

function bo(dao) { return new BO(dao); }

exports.BO = BO;
exports.bo = bo;
