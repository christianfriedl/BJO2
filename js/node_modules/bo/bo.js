/*
 * Copyright (C) 2015,2016 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * BJO2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var _ = require('underscore');
var async = require('async');

var m_dao = require('dao/dao.js');
var m_bjoo = require('BJOObject.js');
var m_sql_calcField = require('sql/calcField.js');
var m_sql_field = require('sql/field.js');
var m_sql_db = require('sql/db.js');
var m_sql_boField = require('sql/boField.js');

function BO(/* m_sql_db.DB */ db) {
    m_bjoo.BJOObject.apply(this);
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); }
            var PARAM = db; if ( !(PARAM instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }
        /* @DEVELOMPENT } */
        this._fields = {};
        this._db = db;
    }
};

function bo(/* m_sql_db.DB */ db) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); }
            var PARAM = db; if ( !(PARAM instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }
        /* @DEVELOMPENT } */
        return new BO(db);
    } else {
        return new BO(); 
    }
}

BO.prototype = new m_bjoo.BJOObject();
BO.prototype.constructor = BO;

BO.prototype.dao = function(dao) {
    if ( typeof(dao) !== 'undefined') {
        this._dao = dao;
        this._fieldsFromDao();
        this._addAccessors();
        return this;
    }
    return this._dao;
};

BO.prototype.field = function(/* m_field.Field|string */ obj) {
    if ( obj instanceof m_sql_field.Field ) {
        this._fields[obj.name()] = obj;
        return this;
    }
    return this._fields[obj];
};

BO.prototype.fieldValue = function(/*string*/name, /*[object]*/value, /*[bool true]*/validate) {
    if ( typeof(value) !== 'undefined' ) {
        var field = this.field(name);
        if ( typeof(validate) === 'undefined' || validate ) {
            field.validate(value, this);
        }
        field.value(value);
        return this;
    }
    return this._fields[name].value();
};

/* validate will not return a value, but rather throw a ValidationException on error */
BO.prototype.validate = /*void*/function() {
    // if no validation is set, we will assume all is good
    if ( typeof(this._validation) !== 'undefined' ) {
        this._validation.bind(this)(); // ignore return value so user need not return this
    }
    return this;
};

BO.prototype.validation = function(/*function()*/validation) {
	if ( typeof(validation) !== 'undefined' ) {	
	    this._validation = validation;
        return this;
    }
    return this._validation;
};


BO.prototype.addFields = function(fields) {
    _.each(fields, function(f) { this.field(f); }, this);
};

BO.prototype._fieldValuesFromRow = function(row) {
    _.each(_.keys(row), function(n) { this.fieldValue(n, row[n]); }, this);
};

BO.prototype._fieldValuesFromDao = function(dao, withCalcFields) {
    if ( typeof(withCalcFields) === 'undefined' ) {
        withCalcFields = false;
    }
    var fields = undefined;
    if ( withCalcFields ) {
        fields = dao.fieldsAsList(); // TODO do we really want to use dao's field list?
    } else {
        fields = dao.databaseFieldsAsList();
    }
    _(fields).each(function(f) { 
        this.fieldValue(f.name(), f.value()); 
    }.bind(this));
};

BO.prototype._fieldOptionsFromDao = function(dao) {
    var fields = dao.fieldsAsList();
    _(fields).each(function(f) {
        if ( typeof(f._options) !== 'undefined' ) { // TODO pfff
            this._fields[f.name()]._options = f._options;
        }
    }.bind(this));
};

BO.prototype._fieldsFromDao = function() {
    _.map(this._dao.fieldsAsList(), 
        function(f) { 
            this.field(f); 
            if ( typeof(f.onAfterAddToBo) === 'function' ) {
                f.onAfterAddToBo(this);
            }
        }.bind(this)
    );
};

BO.prototype.fieldsAsList = function() {
    return _.values(this._fields);
};

BO.prototype.calcFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f instanceof m_sql_calcField.CalcField); }); 
};

BO.prototype._addAccessors = function() {
    // TODO: name must be identifier-compatible!
    _.each(this._fields, function(f) { 
        this[f.accessorName()] = function(val) { 
            if ( arguments.length === 1 && typeof(val) !== 'undefined' ) {
                return this.fieldValue(f.name(), val); 
            } else if ( arguments.length === 0 ) {
                return this.fieldValue(f.name()); 
            }
        }.bind(this); 
    }, this);
    return this;
};

BO.prototype.fieldsWebized = function() {
    return _(this.fieldsAsList()).map(function(f) { return f.webize(); });
};

BO.prototype.calcFieldsWebized = function() {
    return _(this.calcFieldsAsList()).map(function(f) { return f.webize(); });
};

BO.prototype.calculateCalcFields = function(filters, callback) {
    this._dao.calculateCalcFields(filters, function(err, row) { this._fieldValuesFromDao(this._dao); callback(false, this); }.bind(this));
};

BO.prototype.loadBos = function(callback) {
    var fields = _(_(this._fields).values()).filter(function(f) { return f instanceof m_sql_boField.BoField; });
    async.each(fields, function(field, callback) { field.loadBo(this._db, callback); }.bind(this), callback);
};

exports.BO = BO;
exports.bo = bo;
