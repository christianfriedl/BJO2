"use strict";

var _ = require('underscore');
var m_dao = require('dao/dao.js');
var m_bjoo = require('BJOObject.js');
var m_sql_calcField = require('sql/calcField.js');
var m_sql_field = require('sql/field.js');

var BO = function() {
    m_bjoo.BJOObject.apply(this);
    /* @DEVELOPMENT { */ 
        if ( arguments.length > 0 ) { throw new Error('Illegal argument length ' + arguments.length + ' (should be 0)'); }
    /* @DEVELOMPENT } */
    this._className = 'bo.BO';
    this._fields = {};
};

BO.prototype = new m_bjoo.BJOObject();
BO.prototype.constructor = BO;

BO.prototype.dao = function(p_dao) {
    if ( typeof(p_dao) !== 'undefined') {
        this._dao = p_dao;
        this._fieldsFromDao(p_dao);
        this._addAccessors();
        return this;
    }
    return this._dao;
};

BO.prototype.field = function(fieldOrName) {
    if ( fieldOrName instanceof m_sql_field.Field ) {
        this._fields[fieldOrName.name()] = fieldOrName;
        return this;
    }
    return this._fields[fieldOrName];
};

BO.prototype.fieldValue = function(/*string*/name, /*[object]*/value, /*[bool true]*/validate) {
    if ( typeof(value) !== 'undefined' ) {
        var field = this.field(name);
        if ( typeof(validate) === 'undefined' || validate ) {
            field.validate(value, this);
        }
        field.value(value);
        return this;
    }
    return this._fields[name].value();
};

/* validate will not return a value, but rather throw a ValidationException on error */
BO.prototype.validate = /*void*/function() {
    // if no validation is set, we will assume all is good
    if ( typeof(this._validation) !== 'undefined' ) {
        this._validation.bind(this)(); // ignore return value so user need not return this
    }
    return this;
};

BO.prototype.validation = function(/*function()*/validation) {
	if ( typeof(validation) !== 'undefined' ) {	
	    this._validation = validation;
        return this;
    }
    return this._validation;
};


BO.prototype.addFields = function(fields) {
    _.each(fields, function(f) { this.field(f); }, this);
};

BO.prototype._fieldValuesFromRow = function(row) {
    _.each(_.keys(row), function(n) { this.fieldValue(n, row[n]); }, this);
};

BO.prototype._fieldValuesFromDao = function(dao, withCalcFields) {
    if ( typeof(withCalcFields) === 'undefined' ) {
        withCalcFields = false;
    }
    var fields = undefined;
    if ( withCalcFields ) {
        fields = dao.fieldsAsList(); // TODO do we really want to use dao's field list?
    } else {
        fields = dao.writableFieldsAsList();
    }
    _(fields).each(function(f) { 
        this.fieldValue(f.name(), f.value()); 
    }.bind(this));
};

BO.prototype._fieldOptionsFromDao = function(dao) {
    var fields = dao.fieldsAsList();
    _(fields).each(function(f) {
        if ( typeof(f._options) !== 'undefined' ) { // TODO pfff
            this._fields[f.name()]._options = f._options;
        }
    }.bind(this));
};

BO.prototype._fieldsFromDao = function() {
    _.map(
        this._dao.fieldsAsList(), 
        function(f) { 
            this.field(f); 
        }.bind(this));
};

BO.prototype.fieldsAsList = function() {
    return _.values(this._fields);
};

BO.prototype.calcFieldsAsList = function() {
    return _(this._fields).values().filter(function(f) { return (f instanceof m_sql_calcField.CalcField); }); 
};

BO.prototype._addAccessors = function() {
    // TODO: name must be identifier-compatible!
    _.each(this._fields, function(f) { 
        this[f.accessorName()] = function(val) { 
            if ( arguments.length === 1 && typeof(val) !== 'undefined' ) {
                return this.fieldValue(f.name(), val); 
            } else if ( arguments.length === 0 ) {
                return this.fieldValue(f.name()); 
            }
        }.bind(this); 
    }, this);
    return this;
};

BO.prototype.fieldsWebized = function() {
    return _(this.fieldsAsList()).map(function(f) { return f.webize(); });
};

BO.prototype.calcFieldsWebized = function() {
    return _(this.calcFieldsAsList()).map(function(f) { return f.webize(); });
};

BO.prototype.calculateCalcFields = function(conditions, callback) {
    this._dao.calculateCalcFields(conditions, function(err, row) { this._fieldValuesFromDao(this._dao); }.bind(this));
    callback(false, this);
}

function bo() { 
    /* @DEVELOPMENT { */ var ARGLEN = 0; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); }  /* @DEVELOMPENT } */
    return new BO(); 
}

exports.BO = BO;
exports.bo = bo;
