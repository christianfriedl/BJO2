/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of BJO2.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var _ = require('underscore');
var m_bo_bo = require('bo/bo.js');
var m_dao_dao = require('dao/dao.js');

function PrimaryBo() {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */ 
            if ( arguments.length !== 0 ) { throw new Error('Illegal argument length ' + arguments.length); }
        /* @DEVELOMPENT } */ 
        m_bo_bo.BO.call(this);
    }
    this._className = 'bo.PrimaryBo';
};

PrimaryBo.prototype = new m_bo_bo.BO();
PrimaryBo.prototype.constructor = PrimaryBo;

PrimaryBo.prototype.loadById = function(id, callback, calculateCalcFields) {
    if ( typeof(calculateCalcFields) === 'undefined' ) {
        calculateCalcFields = true;
    }
    var self = this;
    /* @DEVELOPMENT { */ 
        if ( !(this._dao instanceof m_dao_dao.DAO) ) { throw new Error('typecheck failed on this._dao: ' + this._dao); }  
    /* @DEVELOPMENT } */ 
    this._dao.loadById(id, function(err, dao) {
        if (err) return callback(err);
        self._fieldsFromDao(dao);
        callback(false, self);
    }.bind(self), calculateCalcFields);
};

PrimaryBo.prototype.save = function(callback) {
    /* @DEVELOPMENT { */ 
        if ( !(this._dao instanceof m_dao_dao.DAO) ) { throw new Error('typecheck failed on this._dao: ' + this._dao); }  
    /* @DEVELOPMENT } */ 
    this._dao.fieldValuesFromBo(this);
    return this._dao.save(function(err, dao) {
        if (err) callback(err);
        this._fieldValuesFromDao(dao);
        return callback(false, this);
    }.bind(this));
};

/*
 * given a fieldName and a row of data, save the whole row to ourself and then save it if it validates
 * this uses save() if autoSave is on
 */
PrimaryBo.prototype.saveField = function(/*string */ fieldName, /* object{name: value,...} */ row, callback, /*[{ autoSave: [bool true] }]*/ options) {
    console.log('PrimaryBo saveField arguments', arguments);
    var opts = _.extend({ autoSave: true }, options);

    if ( _(_(row).keys()).any(function(k) { return ( ( this.field(k).isRequired() ) && ( typeof(row[k]) === 'undefined' || row[k].length === 0 ) ); }.bind(this)) ) {
        return callback(false, this, false); // NOTE: alternate callback sig for additional return info!
    }
    _(_(row).keys()).each(function(name) { if ( this.field(name).isEditable() ) { this.fieldValue(name, row[name]); } }.bind(this));
    this.field(fieldName).validate(row[fieldName], this);
    this.fieldValue(fieldName, row[fieldName]); // does auto-validate!, so if it fails, we won't move on from here

    var shouldInsert = ( this.field('id').value() === null );
    if ( opts.autoSave ) {
        console.log('saveField', 'will autoSave');
        return this.save(
            function(err, bo) { 
                this.loadById(bo.id(), function(err, bo) {
                    return callback(err, this, { hasSaved: true, hasInserted: shouldInsert } ); 
                }, true);
            }.bind(this)
        );
    } else {
        console.log('saveField', 'will NOT autoSave');
        return callback(false, this, { hasSaved: false, hasInserted: false });
    }
};



function primaryBo() { return new PrimaryBo(); }

exports.primaryBo = primaryBo;
exports.PrimaryBo = PrimaryBo;
