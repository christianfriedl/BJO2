"use strict";

var _ = require('underscore');
var m_bo_bo = require('bo/bo.js');
var m_dao_dao = require('dao/dao.js');
var m_sql_db = require('sql/db.js');

function PrimaryBo(/* m_sql_db.DB */ p_db) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */ 
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); }
            var PARAM = p_db; if ( !(PARAM instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }
        /* @DEVELOMPENT } */
        m_bo_bo.BO.call(this, p_db);
        /* @DEVELOMPENT } */ 
        m_bo_bo.BO.call(this);
    }
    this._className = 'bo.PrimaryBo';
};

function primaryBo(/* m_sql_db.DB */ p_db) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); }
            var PARAM = p_db; if ( !(PARAM instanceof m_sql_db.DB) ) { throw new Error('typecheck failed on ' + PARAM + ': ' + PARAM); }
        /* @DEVELOMPENT } */
        return new PrimaryBo(p_db);
    } else {
        return new PrimaryBo(); 
    }
}

PrimaryBo.prototype = new m_bo_bo.BO();
PrimaryBo.prototype.constructor = PrimaryBo;

PrimaryBo.prototype.loadById = function(id, callback, calculateCalcFields) {
    if ( typeof(calculateCalcFields) === 'undefined' ) {
        calculateCalcFields = true;
    }
    var self = this;
    /* @DEVELOPMENT { */ 
        if ( !(this._dao instanceof m_dao_dao.DAO) ) { throw new Error('typecheck failed on this._dao: ' + this._dao); }  
    /* @DEVELOPMENT } */ 
    this._dao.loadById(id, function(err, dao) {
        if (err) return callback(err);
        self._fieldsFromDao(dao);
        callback(false, self);
    }.bind(self), calculateCalcFields);
};

PrimaryBo.prototype.save = function(callback) {
    /* @DEVELOPMENT { */ 
        if ( !(this._dao instanceof m_dao_dao.DAO) ) { throw new Error('typecheck failed on this._dao: ' + this._dao); }  
    /* @DEVELOPMENT } */ 
    this._dao.fieldValuesFromBo(this);
    return this._dao.save(function(err, dao) {
        if (err) callback(err);
        this._fieldValuesFromDao(dao);
        return callback(false, this);
    }.bind(this));
};

PrimaryBo.prototype.saveField = function(fieldName, row, callback, /*[{ autoSave: [bool true] }]*/options) {
    console.log('PrimaryBo saveField arguments', arguments);
    var opts = _.extend({ autoSave: true }, options);

    if ( _(_(row).keys()).any(function(k) { return ( ( this.field(k).isRequired() ) && ( typeof(row[k]) === 'undefined' || row[k].length === 0 ) ); }.bind(this)) ) {
        return callback(false, this, false); // NOTE: alternate callback sig for additional return info!
    }
    _(_(row).keys()).each(function(name) { if ( this.field(name).isEditable() ) { this.fieldValue(name, row[name]); } }.bind(this));
    this.field(fieldName).validate(row[fieldName], this);
    this.fieldValue(fieldName, row[fieldName]); // does auto-validate!

    var shouldInsert = ( this.field('id').value() === null );
    if ( opts.autoSave ) {
        console.log('saveField', 'will autoSave');
        return this.save(
            function(err, bo) { 
                this.loadById(bo.id(), function(err, bo) {
                    return callback(err, this, { hasSaved: true, hasInserted: shouldInsert } ); 
                }, true);
            }.bind(this)
        );
    } else {
        console.log('saveField', 'will NOT autoSave');
        return callback(false, this, { hasSaved: false, hasInserted: false });
    }
};




exports.primaryBo = primaryBo;
exports.PrimaryBo = PrimaryBo;
