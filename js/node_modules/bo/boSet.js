"use strict";

var _ = require('underscore');
var m_dao = require('dao/daoSet.js');
var m_bo = require('bo/bo.js');
var m_bo_primaryBo = require('bo/primaryBo.js');
var m_bjoo = require('BJOObject.js');

function BoSet(/*dao_daoSet*/p_daoSet, /*(optional)bo_bo function()*/p_constructor) {
    m_bjoo.BJOObject.call(this);
    this._className = 'bo.BoSet';
    /* #define DEVELOPMENT */ if ( arguments.length !== 2 || p_constructor === undefined ) { throw new Error('Illegal argument length'); }
    this._daoSet = p_daoSet;
    this._constructor = p_constructor;
}


BoSet.prototype = new m_bjoo.BJOObject();
BoSet.prototype.constructor = BoSet;

/*getter*/BoSet.prototype.daoSet = function() {
    return this._daoSet;
};

/**
 * returns a pure, unloaded bo
 */
/*bo.BO*/BoSet.prototype.templateBo = function() {
    return this._constructor.call({}, this._daoSet.templateDao()); 
};

/*
 * query....
 */
BoSet.prototype.loadAllByConditions = function(conditions, callback, calculateCalcFields) {
    if ( typeof(calculateCalcFields) === 'undefined' ) {
        calculateCalcFields = false;
    }
    var calculateDetailCalcFields = ( this._constructor.call({}) instanceof m_bo_primaryBo.PrimaryBo );
    this._daoSet.loadAllByConditions(conditions, function(err, daos, aggregateDao) {
        if (err) return callback(err);
        var bos = _(daos).map(function(dao) { 
            var bo = this._constructor.call({}, dao); 
            bo._fieldValuesFromDao(dao, calculateDetailCalcFields); // TODO refactor, uses private functions
            bo._fieldOptionsFromDao(dao);
            return bo; 
        }.bind(this));
        
        var aggregateBo = undefined;
        if ( calculateCalcFields ) {
            aggregateBo = this._constructor.call({}, aggregateDao); 
            aggregateBo._fieldValuesFromDao(aggregateDao, calculateCalcFields);
        }
        callback(false, bos, aggregateBo);
    }.bind(this), calculateDetailCalcFields, calculateCalcFields);

};

BoSet.prototype.countByConditions = function(conditions, callback) {
    this._daoSet.countByConditions(conditions, callback);
};

function boSet(/*dao_daoSet*/p_daoSet, /*(optional)bo_bo function()*/p_constructor) { if ( arguments.length > 0 ) { return new BoSet(p_daoSet, p_constructor); } else { return new BoSet(); } }

exports.BoSet = BoSet;
exports.boSet = boSet;
